import { CustomRequestOptions } from '../../common/request';
import { AccountReqApiDto } from '../../model/accountReqApiDto';
import { AccountResApiDto } from '../../model/accountResApiDto';
import { AccountUpdateApiDto } from '../../model/accountUpdateApiDto';
import { AccountWalletInfoDto } from '../../model/accountWalletInfoDto';
import { AmendmentResApiDto } from '../../model/amendmentResApiDto';
import { CreateAmendmentReqApiDto } from '../../model/createAmendmentReqApiDto';
import { PagedQueryResultDtoOfAccountResApiDto } from '../../model/pagedQueryResultDtoOfAccountResApiDto';
import { TermsAndConditionsApiDto } from '../../model/termsAndConditionsApiDto';
export interface ParamsAccountsApigetConnectedAccounts {
    account_status?: 'ACTION_REQUIRED' | 'ACTIVE' | 'CREATED' | 'SUBMITTED' | 'SUSPENDED';
    email?: string;
    from_created_at?: string;
    identifier?: string;
    metadata?: string;
    page_num?: number;
    page_size?: number;
    to_created_at?: string;
}
export declare class AccountsApi {
    agreeToTermsAndConditions(id: string, termsAndConditions: TermsAndConditionsApiDto, options?: CustomRequestOptions): Promise<AccountResApiDto>;
    createAmendment(request: CreateAmendmentReqApiDto, options?: CustomRequestOptions): Promise<AmendmentResApiDto>;
    createNewAccount(account: AccountReqApiDto, options?: CustomRequestOptions): Promise<AccountResApiDto>;
    getAccountByOpenId(id: string, options?: CustomRequestOptions): Promise<AccountResApiDto>;
    getAccountWalletInfo(options?: CustomRequestOptions): Promise<AccountWalletInfoDto>;
    getAmendment(amendment_id: string, options?: CustomRequestOptions): Promise<AmendmentResApiDto>;
    getConnectedAccounts({ account_status, email, from_created_at, identifier, metadata, page_num, page_size, to_created_at }: ParamsAccountsApigetConnectedAccounts, options?: CustomRequestOptions): Promise<PagedQueryResultDtoOfAccountResApiDto>;
    getCurrentAccount(options?: CustomRequestOptions): Promise<AccountResApiDto>;
    submitAccount(id: string, options?: CustomRequestOptions): Promise<AccountResApiDto>;
    updateAccount(id: string, accountUpdateDetailDto: AccountUpdateApiDto, options?: CustomRequestOptions): Promise<AccountResApiDto>;
}
//# sourceMappingURL=accountsApi.d.ts.map