"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SimulationSandboxOnlyRequestForInformationRFIApi = void 0;
const apiClient_1 = require("../../client/apiClient");
const dataParser_1 = require("../../utils/dataParser");
const simulationRfiSessionDto_1 = require("../../model/simulationRfiSessionDto");
class SimulationSandboxOnlyRequestForInformationRFIApi {
    async closeRfiSession(id, options = {}) {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling closeRfiSession.');
        }
        const localVarPath = '/api/v1/simulation/rfis/{id}/close'.replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        const { headers, timeout, responseType } = options;
        let localVarHeaderParams = Object.assign({}, headers ? headers : {});
        const data = await apiClient_1.apiClient.post(localVarPath, {
            headers: localVarHeaderParams,
            timeout,
            responseType,
        });
        const typeName = simulationRfiSessionDto_1.SimulationRfiSessionDto.discriminator;
        return (0, dataParser_1.parseDataToType)(data, typeName);
    }
    async createFollowUpRfiSession(id, request, options = {}) {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling createFollowUpRfiSession.');
        }
        const localVarPath = '/api/v1/simulation/rfis/{id}/follow_up'.replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        const { headers, timeout, responseType } = options;
        let localVarHeaderParams = Object.assign({}, headers ? headers : {});
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling createFollowUpRfiSession.');
        }
        const data = await apiClient_1.apiClient.post(localVarPath, {
            headers: localVarHeaderParams,
            timeout,
            responseType,
        }, request);
        const typeName = simulationRfiSessionDto_1.SimulationRfiSessionDto.discriminator;
        return (0, dataParser_1.parseDataToType)(data, typeName);
    }
    async createRfiSession(request, options = {}) {
        const localVarPath = '/api/v1/simulation/rfis/create';
        const { headers, timeout, responseType } = options;
        let localVarHeaderParams = Object.assign({}, headers ? headers : {});
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling createRfiSession.');
        }
        const data = await apiClient_1.apiClient.post(localVarPath, {
            headers: localVarHeaderParams,
            timeout,
            responseType,
        }, request);
        const typeName = simulationRfiSessionDto_1.SimulationRfiSessionDto.discriminator;
        return (0, dataParser_1.parseDataToType)(data, typeName);
    }
}
exports.SimulationSandboxOnlyRequestForInformationRFIApi = SimulationSandboxOnlyRequestForInformationRFIApi;
//# sourceMappingURL=simulationSandboxOnlyRequestForInformationRFIApi.js.map