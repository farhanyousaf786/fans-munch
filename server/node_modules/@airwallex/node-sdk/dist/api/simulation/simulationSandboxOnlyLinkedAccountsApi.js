"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SimulationSandboxOnlyLinkedAccountsApi = void 0;
const apiClient_1 = require("../../client/apiClient");
const dataParser_1 = require("../../utils/dataParser");
class SimulationSandboxOnlyLinkedAccountsApi {
    async accept(linked_account_id, options = {}) {
        if (linked_account_id === null || linked_account_id === undefined) {
            throw new Error('Required parameter linked_account_id was null or undefined when calling accept.');
        }
        const localVarPath = '/api/v1/simulation/linked_accounts/{linked_account_id}/mandate/accept'.replace('{' + 'linked_account_id' + '}', encodeURIComponent(String(linked_account_id)));
        const { headers, timeout, responseType } = options;
        let localVarHeaderParams = Object.assign({}, headers ? headers : {});
        const data = await apiClient_1.apiClient.post(localVarPath, {
            headers: localVarHeaderParams,
            timeout,
            responseType,
        });
        const typeName = 'boolean';
        return (0, dataParser_1.parseDataToType)(data, typeName);
    }
    async cancel(linked_account_id, options = {}) {
        if (linked_account_id === null || linked_account_id === undefined) {
            throw new Error('Required parameter linked_account_id was null or undefined when calling cancel.');
        }
        const localVarPath = '/api/v1/simulation/linked_accounts/{linked_account_id}/mandate/cancel'.replace('{' + 'linked_account_id' + '}', encodeURIComponent(String(linked_account_id)));
        const { headers, timeout, responseType } = options;
        let localVarHeaderParams = Object.assign({}, headers ? headers : {});
        const data = await apiClient_1.apiClient.post(localVarPath, {
            headers: localVarHeaderParams,
            timeout,
            responseType,
        });
        const typeName = 'boolean';
        return (0, dataParser_1.parseDataToType)(data, typeName);
    }
    async failMicroDeposit(linked_account_id, options = {}) {
        if (linked_account_id === null || linked_account_id === undefined) {
            throw new Error('Required parameter linked_account_id was null or undefined when calling failMicroDeposit.');
        }
        const localVarPath = '/api/v1/simulation/linked_accounts/{linked_account_id}/fail_microdeposits'.replace('{' + 'linked_account_id' + '}', encodeURIComponent(String(linked_account_id)));
        const { headers, timeout, responseType } = options;
        let localVarHeaderParams = Object.assign({}, headers ? headers : {});
        const data = await apiClient_1.apiClient.post(localVarPath, {
            headers: localVarHeaderParams,
            timeout,
            responseType,
        });
        const typeName = 'boolean';
        return (0, dataParser_1.parseDataToType)(data, typeName);
    }
    async reject(linked_account_id, options = {}) {
        if (linked_account_id === null || linked_account_id === undefined) {
            throw new Error('Required parameter linked_account_id was null or undefined when calling reject.');
        }
        const localVarPath = '/api/v1/simulation/linked_accounts/{linked_account_id}/mandate/reject'.replace('{' + 'linked_account_id' + '}', encodeURIComponent(String(linked_account_id)));
        const { headers, timeout, responseType } = options;
        let localVarHeaderParams = Object.assign({}, headers ? headers : {});
        const data = await apiClient_1.apiClient.post(localVarPath, {
            headers: localVarHeaderParams,
            timeout,
            responseType,
        });
        const typeName = 'boolean';
        return (0, dataParser_1.parseDataToType)(data, typeName);
    }
}
exports.SimulationSandboxOnlyLinkedAccountsApi = SimulationSandboxOnlyLinkedAccountsApi;
//# sourceMappingURL=simulationSandboxOnlyLinkedAccountsApi.js.map