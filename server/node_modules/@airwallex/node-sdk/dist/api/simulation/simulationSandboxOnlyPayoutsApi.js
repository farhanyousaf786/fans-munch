"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SimulationSandboxOnlyPayoutsApi = void 0;
const apiClient_1 = require("../../client/apiClient");
const dataParser_1 = require("../../utils/dataParser");
const simulationPaymentDto_1 = require("../../model/simulationPaymentDto");
class SimulationSandboxOnlyPayoutsApi {
    async payoutTransition(payment_id, payload, x_api_version, options = {}) {
        if (payment_id === null || payment_id === undefined) {
            throw new Error('Required parameter payment_id was null or undefined when calling payoutTransition.');
        }
        const localVarPath = '/api/v1/simulation/payments/{payment_id}/transition'.replace('{' + 'payment_id' + '}', encodeURIComponent(String(payment_id)));
        const { headers, timeout, responseType } = options;
        let localVarHeaderParams = Object.assign({}, headers ? headers : {});
        if (payload === null || payload === undefined) {
            throw new Error('Required parameter payload was null or undefined when calling payoutTransition.');
        }
        localVarHeaderParams['x-api-version'] = x_api_version;
        const data = await apiClient_1.apiClient.post(localVarPath, {
            headers: localVarHeaderParams,
            timeout,
            responseType,
        }, payload);
        const typeName = simulationPaymentDto_1.SimulationPaymentDto.discriminator;
        return (0, dataParser_1.parseDataToType)(data, typeName);
    }
}
exports.SimulationSandboxOnlyPayoutsApi = SimulationSandboxOnlyPayoutsApi;
//# sourceMappingURL=simulationSandboxOnlyPayoutsApi.js.map