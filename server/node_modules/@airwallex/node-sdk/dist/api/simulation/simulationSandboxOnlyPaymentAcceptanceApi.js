"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SimulationSandboxOnlyPaymentAcceptanceApi = void 0;
const apiClient_1 = require("../../client/apiClient");
const dataParser_1 = require("../../utils/dataParser");
const simulationPaymentDispute_1 = require("../../model/simulationPaymentDispute");
class SimulationSandboxOnlyPaymentAcceptanceApi {
    async createDispute(request, options = {}) {
        const localVarPath = '/api/v1/simulation/pa/payment_disputes/create';
        const { headers, timeout, responseType } = options;
        let localVarHeaderParams = Object.assign({}, headers ? headers : {});
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling createDispute.');
        }
        const data = await apiClient_1.apiClient.post(localVarPath, {
            headers: localVarHeaderParams,
            timeout,
            responseType,
        }, request);
        const typeName = simulationPaymentDispute_1.SimulationPaymentDispute.discriminator;
        return (0, dataParser_1.parseDataToType)(data, typeName);
    }
    async escalateDispute(id, request, options = {}) {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling escalateDispute.');
        }
        const localVarPath = '/api/v1/simulation/pa/payment_disputes/{id}/escalate'.replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        const { headers, timeout, responseType } = options;
        let localVarHeaderParams = Object.assign({}, headers ? headers : {});
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling escalateDispute.');
        }
        const data = await apiClient_1.apiClient.post(localVarPath, {
            headers: localVarHeaderParams,
            timeout,
            responseType,
        }, request);
        const typeName = simulationPaymentDispute_1.SimulationPaymentDispute.discriminator;
        return (0, dataParser_1.parseDataToType)(data, typeName);
    }
    async resolveDispute(id, request, options = {}) {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling resolveDispute.');
        }
        const localVarPath = '/api/v1/simulation/pa/payment_disputes/{id}/resolve'.replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        const { headers, timeout, responseType } = options;
        let localVarHeaderParams = Object.assign({}, headers ? headers : {});
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling resolveDispute.');
        }
        const data = await apiClient_1.apiClient.post(localVarPath, {
            headers: localVarHeaderParams,
            timeout,
            responseType,
        }, request);
        const typeName = simulationPaymentDispute_1.SimulationPaymentDispute.discriminator;
        return (0, dataParser_1.parseDataToType)(data, typeName);
    }
    async simulateShopperAction(action, payload, options = {}) {
        if (action === null || action === undefined) {
            throw new Error('Required parameter action was null or undefined when calling simulateShopperAction.');
        }
        const localVarPath = '/api/v1/simulation/pa/shopper_actions/{action}'.replace('{' + 'action' + '}', encodeURIComponent(String(action)));
        const { headers, timeout, responseType } = options;
        let localVarHeaderParams = Object.assign({}, headers ? headers : {});
        if (payload === null || payload === undefined) {
            throw new Error('Required parameter payload was null or undefined when calling simulateShopperAction.');
        }
        const data = await apiClient_1.apiClient.post(localVarPath, {
            headers: localVarHeaderParams,
            timeout,
            responseType,
        }, payload);
        const typeName = 'any';
        return (0, dataParser_1.parseDataToType)(data, typeName);
    }
}
exports.SimulationSandboxOnlyPaymentAcceptanceApi = SimulationSandboxOnlyPaymentAcceptanceApi;
//# sourceMappingURL=simulationSandboxOnlyPaymentAcceptanceApi.js.map