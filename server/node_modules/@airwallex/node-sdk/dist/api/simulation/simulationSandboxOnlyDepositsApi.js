"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SimulationSandboxOnlyDepositsApi = void 0;
const apiClient_1 = require("../../client/apiClient");
const dataParser_1 = require("../../utils/dataParser");
const simulationGaDepositResponse_1 = require("../../model/simulationGaDepositResponse");
class SimulationSandboxOnlyDepositsApi {
    async createDeposit(payload, options = {}) {
        const localVarPath = '/api/v1/simulation/deposit/create';
        const { headers, timeout, responseType } = options;
        let localVarHeaderParams = Object.assign({}, headers ? headers : {});
        if (payload === null || payload === undefined) {
            throw new Error('Required parameter payload was null or undefined when calling createDeposit.');
        }
        const data = await apiClient_1.apiClient.post(localVarPath, {
            headers: localVarHeaderParams,
            timeout,
            responseType,
        }, payload);
        const typeName = simulationGaDepositResponse_1.SimulationGaDepositResponse.discriminator;
        return (0, dataParser_1.parseDataToType)(data, typeName);
    }
    async rejectDeposit(deposit_id, options = {}) {
        if (deposit_id === null || deposit_id === undefined) {
            throw new Error('Required parameter deposit_id was null or undefined when calling rejectDeposit.');
        }
        const localVarPath = '/api/v1/simulation/deposits/{deposit_id}/reject'.replace('{' + 'deposit_id' + '}', encodeURIComponent(String(deposit_id)));
        const { headers, timeout, responseType } = options;
        let localVarHeaderParams = Object.assign({}, headers ? headers : {});
        const data = await apiClient_1.apiClient.post(localVarPath, {
            headers: localVarHeaderParams,
            timeout,
            responseType,
        });
        const typeName = 'boolean';
        return (0, dataParser_1.parseDataToType)(data, typeName);
    }
    async reverseDeposit(deposit_id, options = {}) {
        if (deposit_id === null || deposit_id === undefined) {
            throw new Error('Required parameter deposit_id was null or undefined when calling reverseDeposit.');
        }
        const localVarPath = '/api/v1/simulation/deposits/{deposit_id}/reverse'.replace('{' + 'deposit_id' + '}', encodeURIComponent(String(deposit_id)));
        const { headers, timeout, responseType } = options;
        let localVarHeaderParams = Object.assign({}, headers ? headers : {});
        const data = await apiClient_1.apiClient.post(localVarPath, {
            headers: localVarHeaderParams,
            timeout,
            responseType,
        });
        const typeName = 'boolean';
        return (0, dataParser_1.parseDataToType)(data, typeName);
    }
    async settleDeposit(deposit_id, options = {}) {
        if (deposit_id === null || deposit_id === undefined) {
            throw new Error('Required parameter deposit_id was null or undefined when calling settleDeposit.');
        }
        const localVarPath = '/api/v1/simulation/deposits/{deposit_id}/settle'.replace('{' + 'deposit_id' + '}', encodeURIComponent(String(deposit_id)));
        const { headers, timeout, responseType } = options;
        let localVarHeaderParams = Object.assign({}, headers ? headers : {});
        const data = await apiClient_1.apiClient.post(localVarPath, {
            headers: localVarHeaderParams,
            timeout,
            responseType,
        });
        const typeName = 'boolean';
        return (0, dataParser_1.parseDataToType)(data, typeName);
    }
}
exports.SimulationSandboxOnlyDepositsApi = SimulationSandboxOnlyDepositsApi;
//# sourceMappingURL=simulationSandboxOnlyDepositsApi.js.map