"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SimulationSandboxOnlyIssuingApi = void 0;
const apiClient_1 = require("../../client/apiClient");
const dataParser_1 = require("../../utils/dataParser");
const simulationTransactionDTO_1 = require("../../model/simulationTransactionDTO");
class SimulationSandboxOnlyIssuingApi {
    async captureTransaction(transaction_id, payload, options = {}) {
        if (transaction_id === null || transaction_id === undefined) {
            throw new Error('Required parameter transaction_id was null or undefined when calling captureTransaction.');
        }
        const localVarPath = '/api/v1/simulation/issuing/{transaction_id}/capture'.replace('{' + 'transaction_id' + '}', encodeURIComponent(String(transaction_id)));
        const { headers, timeout, responseType } = options;
        let localVarHeaderParams = Object.assign({}, headers ? headers : {});
        if (payload === null || payload === undefined) {
            throw new Error('Required parameter payload was null or undefined when calling captureTransaction.');
        }
        const data = await apiClient_1.apiClient.post(localVarPath, {
            headers: localVarHeaderParams,
            timeout,
            responseType,
        }, payload);
        const typeName = simulationTransactionDTO_1.SimulationTransactionDTO.discriminator;
        return (0, dataParser_1.parseDataToType)(data, typeName);
    }
    async createTransaction(payload, x_api_version, options = {}) {
        const localVarPath = '/api/v1/simulation/issuing/create';
        const { headers, timeout, responseType } = options;
        let localVarHeaderParams = Object.assign({}, headers ? headers : {});
        if (payload === null || payload === undefined) {
            throw new Error('Required parameter payload was null or undefined when calling createTransaction.');
        }
        localVarHeaderParams['x-api-version'] = x_api_version;
        const data = await apiClient_1.apiClient.post(localVarPath, {
            headers: localVarHeaderParams,
            timeout,
            responseType,
        }, payload);
        const typeName = simulationTransactionDTO_1.SimulationTransactionDTO.discriminator;
        return (0, dataParser_1.parseDataToType)(data, typeName);
    }
    async passCardholderReview(id, options = {}) {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling passCardholderReview.');
        }
        const localVarPath = '/api/v1/simulation/issuing/cardholders/{id}/pass_review'.replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        const { headers, timeout, responseType } = options;
        let localVarHeaderParams = Object.assign({}, headers ? headers : {});
        const data = await apiClient_1.apiClient.post(localVarPath, {
            headers: localVarHeaderParams,
            timeout,
            responseType,
        });
        const typeName = 'boolean';
        return (0, dataParser_1.parseDataToType)(data, typeName);
    }
    async refundTransaction(payload, options = {}) {
        const localVarPath = '/api/v1/simulation/issuing/refund';
        const { headers, timeout, responseType } = options;
        let localVarHeaderParams = Object.assign({}, headers ? headers : {});
        if (payload === null || payload === undefined) {
            throw new Error('Required parameter payload was null or undefined when calling refundTransaction.');
        }
        const data = await apiClient_1.apiClient.post(localVarPath, {
            headers: localVarHeaderParams,
            timeout,
            responseType,
        }, payload);
        const typeName = simulationTransactionDTO_1.SimulationTransactionDTO.discriminator;
        return (0, dataParser_1.parseDataToType)(data, typeName);
    }
    async reverseTransaction(transaction_id, payload, options = {}) {
        if (transaction_id === null || transaction_id === undefined) {
            throw new Error('Required parameter transaction_id was null or undefined when calling reverseTransaction.');
        }
        const localVarPath = '/api/v1/simulation/issuing/{transaction_id}/reverse'.replace('{' + 'transaction_id' + '}', encodeURIComponent(String(transaction_id)));
        const { headers, timeout, responseType } = options;
        let localVarHeaderParams = Object.assign({}, headers ? headers : {});
        if (payload === null || payload === undefined) {
            throw new Error('Required parameter payload was null or undefined when calling reverseTransaction.');
        }
        const data = await apiClient_1.apiClient.post(localVarPath, {
            headers: localVarHeaderParams,
            timeout,
            responseType,
        }, payload);
        const typeName = simulationTransactionDTO_1.SimulationTransactionDTO.discriminator;
        return (0, dataParser_1.parseDataToType)(data, typeName);
    }
}
exports.SimulationSandboxOnlyIssuingApi = SimulationSandboxOnlyIssuingApi;
//# sourceMappingURL=simulationSandboxOnlyIssuingApi.js.map