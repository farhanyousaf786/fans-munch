"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FinanceSettlementApi = void 0;
const apiClient_1 = require("../../client/apiClient");
const dataParser_1 = require("../../utils/dataParser");
const paymentAcceptanceFinancialSettlementDto_1 = require("../../model/paymentAcceptanceFinancialSettlementDto");
const paymentAcceptanceFinancialSettlementReportDto_1 = require("../../model/paymentAcceptanceFinancialSettlementReportDto");
const paymentAcceptanceListResponseOfPaymentAcceptanceFinancialSettlementDto_1 = require("../../model/paymentAcceptanceListResponseOfPaymentAcceptanceFinancialSettlementDto");
class FinanceSettlementApi {
    async getFinancialSettlementReport(id, { file_format, version }, options = {}) {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getFinancialSettlementReport.');
        }
        const localVarPath = '/api/v1/pa/financial/settlements/{id}/report'.replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        const { headers, timeout, responseType } = options;
        let localVarHeaderParams = Object.assign({}, headers ? headers : {});
        let queryParams = {};
        if (file_format !== undefined) {
            queryParams['file_format'] = file_format;
        }
        if (version !== undefined) {
            queryParams['version'] = version;
        }
        const data = await apiClient_1.apiClient.get(localVarPath, {
            headers: localVarHeaderParams,
            params: queryParams,
            timeout,
            responseType,
        });
        const typeName = paymentAcceptanceFinancialSettlementReportDto_1.PaymentAcceptanceFinancialSettlementReportDto.discriminator;
        return (0, dataParser_1.parseDataToType)(data, typeName);
    }
    async getFinancialSettlement(id, options = {}) {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getFinancialSettlement.');
        }
        const localVarPath = '/api/v1/pa/financial/settlements/{id}'.replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        const { headers, timeout, responseType } = options;
        let localVarHeaderParams = Object.assign({}, headers ? headers : {});
        const data = await apiClient_1.apiClient.get(localVarPath, {
            headers: localVarHeaderParams,
            timeout,
            responseType,
        });
        const typeName = paymentAcceptanceFinancialSettlementDto_1.PaymentAcceptanceFinancialSettlementDto.discriminator;
        return (0, dataParser_1.parseDataToType)(data, typeName);
    }
    async getFinancialSettlements({ currency, from_settled_at, page_num, page_size, status, to_settled_at }, options = {}) {
        const localVarPath = '/api/v1/pa/financial/settlements';
        const { headers, timeout, responseType } = options;
        let localVarHeaderParams = Object.assign({}, headers ? headers : {});
        let queryParams = {};
        if (currency !== undefined) {
            queryParams['currency'] = currency;
        }
        if (from_settled_at !== undefined) {
            queryParams['from_settled_at'] = from_settled_at;
        }
        if (page_num !== undefined) {
            queryParams['page_num'] = page_num;
        }
        if (page_size !== undefined) {
            queryParams['page_size'] = page_size;
        }
        if (status !== undefined) {
            queryParams['status'] = status;
        }
        if (to_settled_at !== undefined) {
            queryParams['to_settled_at'] = to_settled_at;
        }
        const data = await apiClient_1.apiClient.get(localVarPath, {
            headers: localVarHeaderParams,
            params: queryParams,
            timeout,
            responseType,
        });
        const typeName = paymentAcceptanceListResponseOfPaymentAcceptanceFinancialSettlementDto_1.PaymentAcceptanceListResponseOfPaymentAcceptanceFinancialSettlementDto.discriminator;
        return (0, dataParser_1.parseDataToType)(data, typeName);
    }
}
exports.FinanceSettlementApi = FinanceSettlementApi;
//# sourceMappingURL=financeSettlementApi.js.map