"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransactionalFXConversionAmendmentsApi = void 0;
const apiClient_1 = require("../../client/apiClient");
const dataParser_1 = require("../../utils/dataParser");
const conversionAmendmentDto_1 = require("../../model/conversionAmendmentDto");
const conversionAmendmentQuoteDto_1 = require("../../model/conversionAmendmentQuoteDto");
const pagedQueryResultDtoOfConversionAmendmentDto_1 = require("../../model/pagedQueryResultDtoOfConversionAmendmentDto");
class TransactionalFXConversionAmendmentsApi {
    async createConversionAmendment(request, options = {}) {
        const localVarPath = '/api/v1/fx/conversion_amendments/create';
        const { headers, timeout, responseType } = options;
        let localVarHeaderParams = Object.assign({}, headers ? headers : {});
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling createConversionAmendment.');
        }
        const data = await apiClient_1.apiClient.post(localVarPath, {
            headers: localVarHeaderParams,
            timeout,
            responseType,
        }, request);
        const typeName = conversionAmendmentDto_1.ConversionAmendmentDto.discriminator;
        return (0, dataParser_1.parseDataToType)(data, typeName);
    }
    async findConversionAmendments({ conversion_id }, options = {}) {
        const localVarPath = '/api/v1/fx/conversion_amendments';
        const { headers, timeout, responseType } = options;
        let localVarHeaderParams = Object.assign({}, headers ? headers : {});
        let queryParams = {};
        if (conversion_id !== undefined) {
            queryParams['conversion_id'] = conversion_id;
        }
        const data = await apiClient_1.apiClient.get(localVarPath, {
            headers: localVarHeaderParams,
            params: queryParams,
            timeout,
            responseType,
        });
        const typeName = pagedQueryResultDtoOfConversionAmendmentDto_1.PagedQueryResultDtoOfConversionAmendmentDto.discriminator;
        return (0, dataParser_1.parseDataToType)(data, typeName);
    }
    async getConversionAmendment(conversion_amendment_id, options = {}) {
        if (conversion_amendment_id === null || conversion_amendment_id === undefined) {
            throw new Error('Required parameter conversion_amendment_id was null or undefined when calling getConversionAmendment.');
        }
        const localVarPath = '/api/v1/fx/conversion_amendments/{conversion_amendment_id}'.replace('{' + 'conversion_amendment_id' + '}', encodeURIComponent(String(conversion_amendment_id)));
        const { headers, timeout, responseType } = options;
        let localVarHeaderParams = Object.assign({}, headers ? headers : {});
        const data = await apiClient_1.apiClient.get(localVarPath, {
            headers: localVarHeaderParams,
            timeout,
            responseType,
        });
        const typeName = conversionAmendmentDto_1.ConversionAmendmentDto.discriminator;
        return (0, dataParser_1.parseDataToType)(data, typeName);
    }
    async quoteConversionAmendment(request, options = {}) {
        const localVarPath = '/api/v1/fx/conversion_amendments/quote';
        const { headers, timeout, responseType } = options;
        let localVarHeaderParams = Object.assign({}, headers ? headers : {});
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling quoteConversionAmendment.');
        }
        const data = await apiClient_1.apiClient.post(localVarPath, {
            headers: localVarHeaderParams,
            timeout,
            responseType,
        }, request);
        const typeName = conversionAmendmentQuoteDto_1.ConversionAmendmentQuoteDto.discriminator;
        return (0, dataParser_1.parseDataToType)(data, typeName);
    }
}
exports.TransactionalFXConversionAmendmentsApi = TransactionalFXConversionAmendmentsApi;
//# sourceMappingURL=transactionalFXConversionAmendmentsApi.js.map