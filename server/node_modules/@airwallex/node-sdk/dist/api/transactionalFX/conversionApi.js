"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConversionApi = void 0;
const apiClient_1 = require("../../client/apiClient");
const dataParser_1 = require("../../utils/dataParser");
const conversionDTO_1 = require("../../model/conversionDTO");
const pagedConversionDto_1 = require("../../model/pagedConversionDto");
class ConversionApi {
    async createConversion(request, options = {}) {
        const localVarPath = '/api/v1/fx/conversions/create';
        const { headers, timeout, responseType } = options;
        let localVarHeaderParams = Object.assign({}, headers ? headers : {});
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling createConversion.');
        }
        const data = await apiClient_1.apiClient.post(localVarPath, {
            headers: localVarHeaderParams,
            timeout,
            responseType,
        }, request);
        const typeName = conversionDTO_1.ConversionDTO.discriminator;
        return (0, dataParser_1.parseDataToType)(data, typeName);
    }
    async getConversion(conversion_id, options = {}) {
        if (conversion_id === null || conversion_id === undefined) {
            throw new Error('Required parameter conversion_id was null or undefined when calling getConversion.');
        }
        const localVarPath = '/api/v1/fx/conversions/{conversion_id}'.replace('{' + 'conversion_id' + '}', encodeURIComponent(String(conversion_id)));
        const { headers, timeout, responseType } = options;
        let localVarHeaderParams = Object.assign({}, headers ? headers : {});
        const data = await apiClient_1.apiClient.get(localVarPath, {
            headers: localVarHeaderParams,
            timeout,
            responseType,
        });
        const typeName = conversionDTO_1.ConversionDTO.discriminator;
        return (0, dataParser_1.parseDataToType)(data, typeName);
    }
    async getConversions({ buy_currency, from_created_at, page_num, page_size, request_id, sell_currency, status, to_created_at }, options = {}) {
        const localVarPath = '/api/v1/fx/conversions';
        const { headers, timeout, responseType } = options;
        let localVarHeaderParams = Object.assign({}, headers ? headers : {});
        let queryParams = {};
        if (buy_currency !== undefined) {
            queryParams['buy_currency'] = buy_currency;
        }
        if (from_created_at !== undefined) {
            queryParams['from_created_at'] = from_created_at;
        }
        if (page_num !== undefined) {
            queryParams['page_num'] = page_num;
        }
        if (page_size !== undefined) {
            queryParams['page_size'] = page_size;
        }
        if (request_id !== undefined) {
            queryParams['request_id'] = request_id;
        }
        if (sell_currency !== undefined) {
            queryParams['sell_currency'] = sell_currency;
        }
        if (status !== undefined) {
            queryParams['status'] = status;
        }
        if (to_created_at !== undefined) {
            queryParams['to_created_at'] = to_created_at;
        }
        const data = await apiClient_1.apiClient.get(localVarPath, {
            headers: localVarHeaderParams,
            params: queryParams,
            timeout,
            responseType,
        });
        const typeName = pagedConversionDto_1.PagedConversionDto.discriminator;
        return (0, dataParser_1.parseDataToType)(data, typeName);
    }
}
exports.ConversionApi = ConversionApi;
//# sourceMappingURL=conversionApi.js.map