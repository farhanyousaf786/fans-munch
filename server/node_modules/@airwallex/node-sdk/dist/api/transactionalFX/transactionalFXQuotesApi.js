"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransactionalFXQuotesApi = void 0;
const apiClient_1 = require("../../client/apiClient");
const dataParser_1 = require("../../utils/dataParser");
const fxQuoteDto_1 = require("../../model/fxQuoteDto");
class TransactionalFXQuotesApi {
    async createFxQuote(req, options = {}) {
        const localVarPath = '/api/v1/fx/quotes/create';
        const { headers, timeout, responseType } = options;
        let localVarHeaderParams = Object.assign({}, headers ? headers : {});
        if (req === null || req === undefined) {
            throw new Error('Required parameter req was null or undefined when calling createFxQuote.');
        }
        const data = await apiClient_1.apiClient.post(localVarPath, {
            headers: localVarHeaderParams,
            timeout,
            responseType,
        }, req);
        const typeName = fxQuoteDto_1.FxQuoteDto.discriminator;
        return (0, dataParser_1.parseDataToType)(data, typeName);
    }
    async getFxQuote(quote_id, options = {}) {
        if (quote_id === null || quote_id === undefined) {
            throw new Error('Required parameter quote_id was null or undefined when calling getFxQuote.');
        }
        const localVarPath = '/api/v1/fx/quotes/{quote_id}'.replace('{' + 'quote_id' + '}', encodeURIComponent(String(quote_id)));
        const { headers, timeout, responseType } = options;
        let localVarHeaderParams = Object.assign({}, headers ? headers : {});
        const data = await apiClient_1.apiClient.get(localVarPath, {
            headers: localVarHeaderParams,
            timeout,
            responseType,
        });
        const typeName = fxQuoteDto_1.FxQuoteDto.discriminator;
        return (0, dataParser_1.parseDataToType)(data, typeName);
    }
}
exports.TransactionalFXQuotesApi = TransactionalFXQuotesApi;
//# sourceMappingURL=transactionalFXQuotesApi.js.map