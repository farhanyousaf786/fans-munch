"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PayoutsBatchTransfersApi = void 0;
const apiClient_1 = require("../../client/apiClient");
const dataParser_1 = require("../../utils/dataParser");
const batchTransferDto_1 = require("../../model/batchTransferDto");
const cursorBasedPagedQueryResultDtoOfBatchTransferDto_1 = require("../../model/cursorBasedPagedQueryResultDtoOfBatchTransferDto");
const cursorBasedPagedQueryResultDtoOfBatchTransferItemDto_1 = require("../../model/cursorBasedPagedQueryResultDtoOfBatchTransferItemDto");
class PayoutsBatchTransfersApi {
    async addBatchItems(id, addBatchItemsDto, options = {}) {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling addBatchItems.');
        }
        const localVarPath = '/api/v1/batch_transfers/{id}/add_items'.replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        const { headers, timeout, responseType } = options;
        let localVarHeaderParams = Object.assign({}, headers ? headers : {});
        if (addBatchItemsDto === null || addBatchItemsDto === undefined) {
            throw new Error('Required parameter addBatchItemsDto was null or undefined when calling addBatchItems.');
        }
        const data = await apiClient_1.apiClient.post(localVarPath, {
            headers: localVarHeaderParams,
            timeout,
            responseType,
        }, addBatchItemsDto);
        const typeName = batchTransferDto_1.BatchTransferDto.discriminator;
        return (0, dataParser_1.parseDataToType)(data, typeName);
    }
    async createBatchTransfer(createBatchDto, options = {}) {
        const localVarPath = '/api/v1/batch_transfers/create';
        const { headers, timeout, responseType } = options;
        let localVarHeaderParams = Object.assign({}, headers ? headers : {});
        if (createBatchDto === null || createBatchDto === undefined) {
            throw new Error('Required parameter createBatchDto was null or undefined when calling createBatchTransfer.');
        }
        const data = await apiClient_1.apiClient.post(localVarPath, {
            headers: localVarHeaderParams,
            timeout,
            responseType,
        }, createBatchDto);
        const typeName = batchTransferDto_1.BatchTransferDto.discriminator;
        return (0, dataParser_1.parseDataToType)(data, typeName);
    }
    async deleteBatchItems(id, deleteBatchItemsDto, options = {}) {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteBatchItems.');
        }
        const localVarPath = '/api/v1/batch_transfers/{id}/delete_items'.replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        const { headers, timeout, responseType } = options;
        let localVarHeaderParams = Object.assign({}, headers ? headers : {});
        if (deleteBatchItemsDto === null || deleteBatchItemsDto === undefined) {
            throw new Error('Required parameter deleteBatchItemsDto was null or undefined when calling deleteBatchItems.');
        }
        const data = await apiClient_1.apiClient.post(localVarPath, {
            headers: localVarHeaderParams,
            timeout,
            responseType,
        }, deleteBatchItemsDto);
        const typeName = batchTransferDto_1.BatchTransferDto.discriminator;
        return (0, dataParser_1.parseDataToType)(data, typeName);
    }
    async deleteBatch(id, options = {}) {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteBatch.');
        }
        const localVarPath = '/api/v1/batch_transfers/{id}/delete'.replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        const { headers, timeout, responseType } = options;
        let localVarHeaderParams = Object.assign({}, headers ? headers : {});
        const data = await apiClient_1.apiClient.post(localVarPath, {
            headers: localVarHeaderParams,
            timeout,
            responseType,
        });
        const typeName = batchTransferDto_1.BatchTransferDto.discriminator;
        return (0, dataParser_1.parseDataToType)(data, typeName);
    }
    async getBatchTransferById(id, options = {}) {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getBatchTransferById.');
        }
        const localVarPath = '/api/v1/batch_transfers/{id}'.replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        const { headers, timeout, responseType } = options;
        let localVarHeaderParams = Object.assign({}, headers ? headers : {});
        const data = await apiClient_1.apiClient.get(localVarPath, {
            headers: localVarHeaderParams,
            timeout,
            responseType,
        });
        const typeName = batchTransferDto_1.BatchTransferDto.discriminator;
        return (0, dataParser_1.parseDataToType)(data, typeName);
    }
    async getItemsByBatchId(id, { page, page_size }, options = {}) {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getItemsByBatchId.');
        }
        const localVarPath = '/api/v1/batch_transfers/{id}/items'.replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        const { headers, timeout, responseType } = options;
        let localVarHeaderParams = Object.assign({}, headers ? headers : {});
        let queryParams = {};
        if (page !== undefined) {
            queryParams['page'] = page;
        }
        if (page_size !== undefined) {
            queryParams['page_size'] = page_size;
        }
        const data = await apiClient_1.apiClient.get(localVarPath, {
            headers: localVarHeaderParams,
            params: queryParams,
            timeout,
            responseType,
        });
        const typeName = cursorBasedPagedQueryResultDtoOfBatchTransferItemDto_1.CursorBasedPagedQueryResultDtoOfBatchTransferItemDto.discriminator;
        return (0, dataParser_1.parseDataToType)(data, typeName);
    }
    async quoteBatchTransfer(id, options = {}) {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling quoteBatchTransfer.');
        }
        const localVarPath = '/api/v1/batch_transfers/{id}/quote'.replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        const { headers, timeout, responseType } = options;
        let localVarHeaderParams = Object.assign({}, headers ? headers : {});
        const data = await apiClient_1.apiClient.post(localVarPath, {
            headers: localVarHeaderParams,
            timeout,
            responseType,
        });
        const typeName = batchTransferDto_1.BatchTransferDto.discriminator;
        return (0, dataParser_1.parseDataToType)(data, typeName);
    }
    async retrieveBatches({ page, page_size, request_id, short_reference_id, status }, options = {}) {
        const localVarPath = '/api/v1/batch_transfers';
        const { headers, timeout, responseType } = options;
        let localVarHeaderParams = Object.assign({}, headers ? headers : {});
        let queryParams = {};
        if (page !== undefined) {
            queryParams['page'] = page;
        }
        if (page_size !== undefined) {
            queryParams['page_size'] = page_size;
        }
        if (request_id !== undefined) {
            queryParams['request_id'] = request_id;
        }
        if (short_reference_id !== undefined) {
            queryParams['short_reference_id'] = short_reference_id;
        }
        if (status !== undefined) {
            queryParams['status'] = status;
        }
        const data = await apiClient_1.apiClient.get(localVarPath, {
            headers: localVarHeaderParams,
            params: queryParams,
            timeout,
            responseType,
        });
        const typeName = cursorBasedPagedQueryResultDtoOfBatchTransferDto_1.CursorBasedPagedQueryResultDtoOfBatchTransferDto.discriminator;
        return (0, dataParser_1.parseDataToType)(data, typeName);
    }
    async submitBatchTransfer(id, options = {}) {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling submitBatchTransfer.');
        }
        const localVarPath = '/api/v1/batch_transfers/{id}/submit'.replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        const { headers, timeout, responseType } = options;
        let localVarHeaderParams = Object.assign({}, headers ? headers : {});
        const data = await apiClient_1.apiClient.post(localVarPath, {
            headers: localVarHeaderParams,
            timeout,
            responseType,
        });
        const typeName = batchTransferDto_1.BatchTransferDto.discriminator;
        return (0, dataParser_1.parseDataToType)(data, typeName);
    }
}
exports.PayoutsBatchTransfersApi = PayoutsBatchTransfersApi;
//# sourceMappingURL=payoutsBatchTransfersApi.js.map