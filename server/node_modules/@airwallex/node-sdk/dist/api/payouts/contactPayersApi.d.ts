import { CustomRequestOptions } from '../../common/request';
import { CreatePayerSchemaRequestRaw } from '../../model/createPayerSchemaRequestRaw';
import { PagedQueryResultDtoOfPayerContactDto } from '../../model/pagedQueryResultDtoOfPayerContactDto';
import { PayerContactDto } from '../../model/payerContactDto';
import { PayerContactRequestDto } from '../../model/payerContactRequestDto';
import { SchemaResult } from '../../model/schemaResult';
export interface ParamsContactPayersApigetPayers {
    entity_type?: string;
    from_date?: Date;
    name?: string;
    nick_name?: string;
    page_num?: number;
    page_size?: number;
    to_date?: Date;
}
export declare class ContactPayersApi {
    createPayer(payerContactRequestDto: PayerContactRequestDto, options?: CustomRequestOptions): Promise<PayerContactDto>;
    delete(id: string, options?: CustomRequestOptions): Promise<boolean>;
    getPayerSchema(createPayerSchemaRequestRaw: CreatePayerSchemaRequestRaw, options?: CustomRequestOptions): Promise<SchemaResult>;
    getPayer(id: string, options?: CustomRequestOptions): Promise<PayerContactDto>;
    getPayers({ entity_type, from_date, name, nick_name, page_num, page_size, to_date }: ParamsContactPayersApigetPayers, options?: CustomRequestOptions): Promise<PagedQueryResultDtoOfPayerContactDto>;
    updatePayer(id: string, payerContactRequestDto: PayerContactRequestDto, options?: CustomRequestOptions): Promise<PayerContactDto>;
    validatePayerRequestV3(createPayerRequestRaw: PayerContactRequestDto, options?: CustomRequestOptions): Promise<object>;
}
//# sourceMappingURL=contactPayersApi.d.ts.map