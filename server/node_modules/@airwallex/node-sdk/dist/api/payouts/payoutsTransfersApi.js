"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PayoutsTransfersApi = void 0;
const apiClient_1 = require("../../client/apiClient");
const dataParser_1 = require("../../utils/dataParser");
const cursorBasedPagedQueryResultDtoOfTransferDto_1 = require("../../model/cursorBasedPagedQueryResultDtoOfTransferDto");
const transferDto_1 = require("../../model/transferDto");
class PayoutsTransfersApi {
    async cancelTransfer(id, options = {}) {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling cancelTransfer.');
        }
        const localVarPath = '/api/v1/transfers/{id}/cancel'.replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        const { headers, timeout, responseType } = options;
        let localVarHeaderParams = Object.assign({}, headers ? headers : {});
        const data = await apiClient_1.apiClient.post(localVarPath, {
            headers: localVarHeaderParams,
            timeout,
            responseType,
        });
        const typeName = 'object';
        return (0, dataParser_1.parseDataToType)(data, typeName);
    }
    async createTransfer(createTransferRequestDto, options = {}) {
        const localVarPath = '/api/v1/transfers/create';
        const { headers, timeout, responseType } = options;
        let localVarHeaderParams = Object.assign({}, headers ? headers : {});
        if (createTransferRequestDto === null || createTransferRequestDto === undefined) {
            throw new Error('Required parameter createTransferRequestDto was null or undefined when calling createTransfer.');
        }
        const data = await apiClient_1.apiClient.post(localVarPath, {
            headers: localVarHeaderParams,
            timeout,
            responseType,
        }, createTransferRequestDto);
        const typeName = transferDto_1.TransferDto.discriminator;
        return (0, dataParser_1.parseDataToType)(data, typeName);
    }
    async fundTransfer(id, options = {}) {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling fundTransfer.');
        }
        const localVarPath = '/api/v1/transfers/{id}/confirm_funding'.replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        const { headers, timeout, responseType } = options;
        let localVarHeaderParams = Object.assign({}, headers ? headers : {});
        const data = await apiClient_1.apiClient.post(localVarPath, {
            headers: localVarHeaderParams,
            timeout,
            responseType,
        });
        const typeName = transferDto_1.TransferDto.discriminator;
        return (0, dataParser_1.parseDataToType)(data, typeName);
    }
    async getTransfer(id, options = {}) {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getTransfer.');
        }
        const localVarPath = '/api/v1/transfers/{id}'.replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        const { headers, timeout, responseType } = options;
        let localVarHeaderParams = Object.assign({}, headers ? headers : {});
        const data = await apiClient_1.apiClient.get(localVarPath, {
            headers: localVarHeaderParams,
            timeout,
            responseType,
        });
        const typeName = transferDto_1.TransferDto.discriminator;
        return (0, dataParser_1.parseDataToType)(data, typeName);
    }
    async getTransfers({ from_created_at, page, page_size, request_id, short_reference_id, status, to_created_at, transfer_currency }, options = {}) {
        const localVarPath = '/api/v1/transfers';
        const { headers, timeout, responseType } = options;
        let localVarHeaderParams = Object.assign({}, headers ? headers : {});
        let queryParams = {};
        if (from_created_at !== undefined) {
            queryParams['from_created_at'] = from_created_at;
        }
        if (page !== undefined) {
            queryParams['page'] = page;
        }
        if (page_size !== undefined) {
            queryParams['page_size'] = page_size;
        }
        if (request_id !== undefined) {
            queryParams['request_id'] = request_id;
        }
        if (short_reference_id !== undefined) {
            queryParams['short_reference_id'] = short_reference_id;
        }
        if (status !== undefined) {
            queryParams['status'] = status;
        }
        if (to_created_at !== undefined) {
            queryParams['to_created_at'] = to_created_at;
        }
        if (transfer_currency !== undefined) {
            queryParams['transfer_currency'] = transfer_currency;
        }
        const data = await apiClient_1.apiClient.get(localVarPath, {
            headers: localVarHeaderParams,
            params: queryParams,
            timeout,
            responseType,
        });
        const typeName = cursorBasedPagedQueryResultDtoOfTransferDto_1.CursorBasedPagedQueryResultDtoOfTransferDto.discriminator;
        return (0, dataParser_1.parseDataToType)(data, typeName);
    }
    async validateTransfer(createTransferRequestDto, options = {}) {
        const localVarPath = '/api/v1/transfers/validate';
        const { headers, timeout, responseType } = options;
        let localVarHeaderParams = Object.assign({}, headers ? headers : {});
        if (createTransferRequestDto === null || createTransferRequestDto === undefined) {
            throw new Error('Required parameter createTransferRequestDto was null or undefined when calling validateTransfer.');
        }
        const data = await apiClient_1.apiClient.post(localVarPath, {
            headers: localVarHeaderParams,
            timeout,
            responseType,
        }, createTransferRequestDto);
        const typeName = 'object';
        return (0, dataParser_1.parseDataToType)(data, typeName);
    }
}
exports.PayoutsTransfersApi = PayoutsTransfersApi;
//# sourceMappingURL=payoutsTransfersApi.js.map