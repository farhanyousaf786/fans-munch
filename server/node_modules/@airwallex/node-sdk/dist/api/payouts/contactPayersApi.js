"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ContactPayersApi = void 0;
const apiClient_1 = require("../../client/apiClient");
const dataParser_1 = require("../../utils/dataParser");
const pagedQueryResultDtoOfPayerContactDto_1 = require("../../model/pagedQueryResultDtoOfPayerContactDto");
const payerContactDto_1 = require("../../model/payerContactDto");
const schemaResult_1 = require("../../model/schemaResult");
class ContactPayersApi {
    async createPayer(payerContactRequestDto, options = {}) {
        const localVarPath = '/api/v1/payers/create';
        const { headers, timeout, responseType } = options;
        let localVarHeaderParams = Object.assign({}, headers ? headers : {});
        if (payerContactRequestDto === null || payerContactRequestDto === undefined) {
            throw new Error('Required parameter payerContactRequestDto was null or undefined when calling createPayer.');
        }
        const data = await apiClient_1.apiClient.post(localVarPath, {
            headers: localVarHeaderParams,
            timeout,
            responseType,
        }, payerContactRequestDto);
        const typeName = payerContactDto_1.PayerContactDto.discriminator;
        return (0, dataParser_1.parseDataToType)(data, typeName);
    }
    async delete(id, options = {}) {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling delete.');
        }
        const localVarPath = '/api/v1/payers/{id}/delete'.replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        const { headers, timeout, responseType } = options;
        let localVarHeaderParams = Object.assign({}, headers ? headers : {});
        const data = await apiClient_1.apiClient.post(localVarPath, {
            headers: localVarHeaderParams,
            timeout,
            responseType,
        });
        const typeName = 'boolean';
        return (0, dataParser_1.parseDataToType)(data, typeName);
    }
    async getPayerSchema(createPayerSchemaRequestRaw, options = {}) {
        const localVarPath = '/api/v1/payers/schema';
        const { headers, timeout, responseType } = options;
        let localVarHeaderParams = Object.assign({}, headers ? headers : {});
        if (createPayerSchemaRequestRaw === null || createPayerSchemaRequestRaw === undefined) {
            throw new Error('Required parameter createPayerSchemaRequestRaw was null or undefined when calling getPayerSchema.');
        }
        const data = await apiClient_1.apiClient.post(localVarPath, {
            headers: localVarHeaderParams,
            timeout,
            responseType,
        }, createPayerSchemaRequestRaw);
        const typeName = schemaResult_1.SchemaResult.discriminator;
        return (0, dataParser_1.parseDataToType)(data, typeName);
    }
    async getPayer(id, options = {}) {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getPayer.');
        }
        const localVarPath = '/api/v1/payers/{id}'.replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        const { headers, timeout, responseType } = options;
        let localVarHeaderParams = Object.assign({}, headers ? headers : {});
        const data = await apiClient_1.apiClient.get(localVarPath, {
            headers: localVarHeaderParams,
            timeout,
            responseType,
        });
        const typeName = payerContactDto_1.PayerContactDto.discriminator;
        return (0, dataParser_1.parseDataToType)(data, typeName);
    }
    async getPayers({ entity_type, from_date, name, nick_name, page_num, page_size, to_date }, options = {}) {
        const localVarPath = '/api/v1/payers';
        const { headers, timeout, responseType } = options;
        let localVarHeaderParams = Object.assign({}, headers ? headers : {});
        let queryParams = {};
        if (entity_type !== undefined) {
            queryParams['entity_type'] = entity_type;
        }
        if (from_date !== undefined) {
            queryParams['from_date'] = from_date;
        }
        if (name !== undefined) {
            queryParams['name'] = name;
        }
        if (nick_name !== undefined) {
            queryParams['nick_name'] = nick_name;
        }
        if (page_num !== undefined) {
            queryParams['page_num'] = page_num;
        }
        if (page_size !== undefined) {
            queryParams['page_size'] = page_size;
        }
        if (to_date !== undefined) {
            queryParams['to_date'] = to_date;
        }
        const data = await apiClient_1.apiClient.get(localVarPath, {
            headers: localVarHeaderParams,
            params: queryParams,
            timeout,
            responseType,
        });
        const typeName = pagedQueryResultDtoOfPayerContactDto_1.PagedQueryResultDtoOfPayerContactDto.discriminator;
        return (0, dataParser_1.parseDataToType)(data, typeName);
    }
    async updatePayer(id, payerContactRequestDto, options = {}) {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updatePayer.');
        }
        const localVarPath = '/api/v1/payers/{id}/update'.replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        const { headers, timeout, responseType } = options;
        let localVarHeaderParams = Object.assign({}, headers ? headers : {});
        if (payerContactRequestDto === null || payerContactRequestDto === undefined) {
            throw new Error('Required parameter payerContactRequestDto was null or undefined when calling updatePayer.');
        }
        const data = await apiClient_1.apiClient.post(localVarPath, {
            headers: localVarHeaderParams,
            timeout,
            responseType,
        }, payerContactRequestDto);
        const typeName = payerContactDto_1.PayerContactDto.discriminator;
        return (0, dataParser_1.parseDataToType)(data, typeName);
    }
    async validatePayerRequestV3(createPayerRequestRaw, options = {}) {
        const localVarPath = '/api/v1/payers/validate';
        const { headers, timeout, responseType } = options;
        let localVarHeaderParams = Object.assign({}, headers ? headers : {});
        if (createPayerRequestRaw === null || createPayerRequestRaw === undefined) {
            throw new Error('Required parameter createPayerRequestRaw was null or undefined when calling validatePayerRequestV3.');
        }
        const data = await apiClient_1.apiClient.post(localVarPath, {
            headers: localVarHeaderParams,
            timeout,
            responseType,
        }, createPayerRequestRaw);
        const typeName = 'object';
        return (0, dataParser_1.parseDataToType)(data, typeName);
    }
}
exports.ContactPayersApi = ContactPayersApi;
//# sourceMappingURL=contactPayersApi.js.map