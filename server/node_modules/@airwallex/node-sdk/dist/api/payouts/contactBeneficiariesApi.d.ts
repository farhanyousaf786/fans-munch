import { CustomRequestOptions } from '../../common/request';
import { ApiSchemaResponse } from '../../model/apiSchemaResponse';
import { BeneficiaryContactDto } from '../../model/beneficiaryContactDto';
import { BeneficiaryContactRequestDto } from '../../model/beneficiaryContactRequestDto';
import { BeneficiarySampleDto } from '../../model/beneficiarySampleDto';
import { CreateBeneficiarySchemaRequestRaw } from '../../model/createBeneficiarySchemaRequestRaw';
import { FinancialInstitutionResponse } from '../../model/financialInstitutionResponse';
import { FormSchemaResponse } from '../../model/formSchemaResponse';
import { PagedQueryResultDtoOfBeneficiaryContactDto } from '../../model/pagedQueryResultDtoOfBeneficiaryContactDto';
import { SchemaResult } from '../../model/schemaResult';
export interface ParamsContactBeneficiariesApigetBeneficiaries {
    bank_account_number?: string;
    company_name?: string;
    entity_type?: string;
    from_date?: Date;
    name?: string;
    nick_name?: string;
    page_num?: number;
    page_size?: number;
    to_date?: Date;
    type?: Array<string>;
}
export interface ParamsContactBeneficiariesApisupportBanks {
    account_currency: string;
    bank_country_code: string;
    bank_identifier?: string;
    entity_type: string;
    keyword?: string;
    local_clearing_system?: string;
    transfer_method: string;
}
export declare class ContactBeneficiariesApi {
    apiSchema(request: BeneficiarySampleDto, options?: CustomRequestOptions): Promise<ApiSchemaResponse>;
    createBeneficiary(beneficiaryContactRequest: BeneficiaryContactRequestDto, options?: CustomRequestOptions): Promise<BeneficiaryContactDto>;
    delete(id: string, options?: CustomRequestOptions): Promise<boolean>;
    formSchema(request: BeneficiarySampleDto, options?: CustomRequestOptions): Promise<FormSchemaResponse>;
    getBeneficiaries({ bank_account_number, company_name, entity_type, from_date, name, nick_name, page_num, page_size, to_date, type }: ParamsContactBeneficiariesApigetBeneficiaries, options?: CustomRequestOptions): Promise<PagedQueryResultDtoOfBeneficiaryContactDto>;
    getBeneficiarySchema(createBeneficiarySchemaRequestRaw: CreateBeneficiarySchemaRequestRaw, options?: CustomRequestOptions): Promise<SchemaResult>;
    getBeneficiary(id: string, options?: CustomRequestOptions): Promise<BeneficiaryContactDto>;
    supportBanks({ account_currency, bank_country_code, bank_identifier, entity_type, keyword, local_clearing_system, transfer_method }: ParamsContactBeneficiariesApisupportBanks, options?: CustomRequestOptions): Promise<FinancialInstitutionResponse>;
    updateBeneficiary(id: string, beneficiaryContactRequest: BeneficiaryContactRequestDto, options?: CustomRequestOptions): Promise<BeneficiaryContactDto>;
    validateBeneficiaryRequest(beneficiaryContactRequest: BeneficiaryContactRequestDto, options?: CustomRequestOptions): Promise<object>;
}
//# sourceMappingURL=contactBeneficiariesApi.d.ts.map