"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PaymentAcceptanceTerminalsApi = void 0;
const apiClient_1 = require("../../client/apiClient");
const dataParser_1 = require("../../utils/dataParser");
const paymentAcceptanceKeyBasedListResponseOfPaymentAcceptanceTerminal_1 = require("../../model/paymentAcceptanceKeyBasedListResponseOfPaymentAcceptanceTerminal");
const paymentAcceptanceTerminal_1 = require("../../model/paymentAcceptanceTerminal");
class PaymentAcceptanceTerminalsApi {
    async activateTerminal(id, terminal_activate_request, options = {}) {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling activateTerminal.');
        }
        const localVarPath = '/api/v1/pa/pos/terminals/{id}/activate'.replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        const { headers, timeout, responseType } = options;
        let localVarHeaderParams = Object.assign({}, headers ? headers : {});
        if (terminal_activate_request === null || terminal_activate_request === undefined) {
            throw new Error('Required parameter terminal_activate_request was null or undefined when calling activateTerminal.');
        }
        const data = await apiClient_1.apiClient.post(localVarPath, {
            headers: localVarHeaderParams,
            timeout,
            responseType,
        }, terminal_activate_request);
        const typeName = paymentAcceptanceTerminal_1.PaymentAcceptanceTerminal.discriminator;
        return (0, dataParser_1.parseDataToType)(data, typeName);
    }
    async createTerminal(terminal_create_request, options = {}) {
        const localVarPath = '/api/v1/pa/pos/terminals/create';
        const { headers, timeout, responseType } = options;
        let localVarHeaderParams = Object.assign({}, headers ? headers : {});
        if (terminal_create_request === null || terminal_create_request === undefined) {
            throw new Error('Required parameter terminal_create_request was null or undefined when calling createTerminal.');
        }
        const data = await apiClient_1.apiClient.post(localVarPath, {
            headers: localVarHeaderParams,
            timeout,
            responseType,
        }, terminal_create_request);
        const typeName = paymentAcceptanceTerminal_1.PaymentAcceptanceTerminal.discriminator;
        return (0, dataParser_1.parseDataToType)(data, typeName);
    }
    async deactivateTerminal(id, terminal_deactivate_request, options = {}) {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deactivateTerminal.');
        }
        const localVarPath = '/api/v1/pa/pos/terminals/{id}/deactivate'.replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        const { headers, timeout, responseType } = options;
        let localVarHeaderParams = Object.assign({}, headers ? headers : {});
        if (terminal_deactivate_request === null || terminal_deactivate_request === undefined) {
            throw new Error('Required parameter terminal_deactivate_request was null or undefined when calling deactivateTerminal.');
        }
        const data = await apiClient_1.apiClient.post(localVarPath, {
            headers: localVarHeaderParams,
            timeout,
            responseType,
        }, terminal_deactivate_request);
        const typeName = paymentAcceptanceTerminal_1.PaymentAcceptanceTerminal.discriminator;
        return (0, dataParser_1.parseDataToType)(data, typeName);
    }
    async processPaymentIntent(id, terminal_process_payment_intent_request, options = {}) {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling processPaymentIntent.');
        }
        const localVarPath = '/api/v1/pa/pos/terminals/{id}/process_payment_intent'.replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        const { headers, timeout, responseType } = options;
        let localVarHeaderParams = Object.assign({}, headers ? headers : {});
        if (terminal_process_payment_intent_request === null || terminal_process_payment_intent_request === undefined) {
            throw new Error('Required parameter terminal_process_payment_intent_request was null or undefined when calling processPaymentIntent.');
        }
        const data = await apiClient_1.apiClient.post(localVarPath, {
            headers: localVarHeaderParams,
            timeout,
            responseType,
        }, terminal_process_payment_intent_request);
        const typeName = paymentAcceptanceTerminal_1.PaymentAcceptanceTerminal.discriminator;
        return (0, dataParser_1.parseDataToType)(data, typeName);
    }
    async queryTerminals({ device_model, nickname, page, page_size, serial_number, status }, options = {}) {
        const localVarPath = '/api/v1/pa/pos/terminals';
        const { headers, timeout, responseType } = options;
        let localVarHeaderParams = Object.assign({}, headers ? headers : {});
        let queryParams = {};
        if (device_model !== undefined) {
            queryParams['device_model'] = device_model;
        }
        if (nickname !== undefined) {
            queryParams['nickname'] = nickname;
        }
        if (page !== undefined) {
            queryParams['page'] = page;
        }
        if (page_size !== undefined) {
            queryParams['page_size'] = page_size;
        }
        if (serial_number !== undefined) {
            queryParams['serial_number'] = serial_number;
        }
        if (status !== undefined) {
            queryParams['status'] = status;
        }
        const data = await apiClient_1.apiClient.get(localVarPath, {
            headers: localVarHeaderParams,
            params: queryParams,
            timeout,
            responseType,
        });
        const typeName = paymentAcceptanceKeyBasedListResponseOfPaymentAcceptanceTerminal_1.PaymentAcceptanceKeyBasedListResponseOfPaymentAcceptanceTerminal.discriminator;
        return (0, dataParser_1.parseDataToType)(data, typeName);
    }
    async resetPassword(id, terminal_update_request, options = {}) {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling resetPassword.');
        }
        const localVarPath = '/api/v1/pa/pos/terminals/{id}/reset_password'.replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        const { headers, timeout, responseType } = options;
        let localVarHeaderParams = Object.assign({}, headers ? headers : {});
        if (terminal_update_request === null || terminal_update_request === undefined) {
            throw new Error('Required parameter terminal_update_request was null or undefined when calling resetPassword.');
        }
        const data = await apiClient_1.apiClient.post(localVarPath, {
            headers: localVarHeaderParams,
            timeout,
            responseType,
        }, terminal_update_request);
        const typeName = paymentAcceptanceTerminal_1.PaymentAcceptanceTerminal.discriminator;
        return (0, dataParser_1.parseDataToType)(data, typeName);
    }
    async retrieveTerminal(id, options = {}) {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling retrieveTerminal.');
        }
        const localVarPath = '/api/v1/pa/pos/terminals/{id}'.replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        const { headers, timeout, responseType } = options;
        let localVarHeaderParams = Object.assign({}, headers ? headers : {});
        const data = await apiClient_1.apiClient.get(localVarPath, {
            headers: localVarHeaderParams,
            timeout,
            responseType,
        });
        const typeName = paymentAcceptanceTerminal_1.PaymentAcceptanceTerminal.discriminator;
        return (0, dataParser_1.parseDataToType)(data, typeName);
    }
    async terminateTerminal(id, terminal_terminate_request, options = {}) {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling terminateTerminal.');
        }
        const localVarPath = '/api/v1/pa/pos/terminals/{id}/terminate'.replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        const { headers, timeout, responseType } = options;
        let localVarHeaderParams = Object.assign({}, headers ? headers : {});
        if (terminal_terminate_request === null || terminal_terminate_request === undefined) {
            throw new Error('Required parameter terminal_terminate_request was null or undefined when calling terminateTerminal.');
        }
        const data = await apiClient_1.apiClient.post(localVarPath, {
            headers: localVarHeaderParams,
            timeout,
            responseType,
        }, terminal_terminate_request);
        const typeName = paymentAcceptanceTerminal_1.PaymentAcceptanceTerminal.discriminator;
        return (0, dataParser_1.parseDataToType)(data, typeName);
    }
    async updateTerminal(id, terminal_update_request, options = {}) {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updateTerminal.');
        }
        const localVarPath = '/api/v1/pa/pos/terminals/{id}/update'.replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        const { headers, timeout, responseType } = options;
        let localVarHeaderParams = Object.assign({}, headers ? headers : {});
        if (terminal_update_request === null || terminal_update_request === undefined) {
            throw new Error('Required parameter terminal_update_request was null or undefined when calling updateTerminal.');
        }
        const data = await apiClient_1.apiClient.post(localVarPath, {
            headers: localVarHeaderParams,
            timeout,
            responseType,
        }, terminal_update_request);
        const typeName = paymentAcceptanceTerminal_1.PaymentAcceptanceTerminal.discriminator;
        return (0, dataParser_1.parseDataToType)(data, typeName);
    }
}
exports.PaymentAcceptanceTerminalsApi = PaymentAcceptanceTerminalsApi;
//# sourceMappingURL=paymentAcceptanceTerminalsApi.js.map