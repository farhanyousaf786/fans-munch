"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PaymentAcceptancePaymentConsentsApi = void 0;
const apiClient_1 = require("../../client/apiClient");
const dataParser_1 = require("../../utils/dataParser");
const paymentAcceptanceListResponseOfPaymentAcceptancePaymentConsent_1 = require("../../model/paymentAcceptanceListResponseOfPaymentAcceptancePaymentConsent");
const paymentAcceptancePaymentConsent_1 = require("../../model/paymentAcceptancePaymentConsent");
class PaymentAcceptancePaymentConsentsApi {
    async continueVerifyPaymentConsent(id, payment_consent_continue_verify_request, options = {}) {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling continueVerifyPaymentConsent.');
        }
        const localVarPath = '/api/v1/pa/payment_consents/{id}/verify_continue'.replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        const { headers, timeout, responseType } = options;
        let localVarHeaderParams = Object.assign({}, headers ? headers : {});
        if (payment_consent_continue_verify_request === null || payment_consent_continue_verify_request === undefined) {
            throw new Error('Required parameter payment_consent_continue_verify_request was null or undefined when calling continueVerifyPaymentConsent.');
        }
        const data = await apiClient_1.apiClient.post(localVarPath, {
            headers: localVarHeaderParams,
            timeout,
            responseType,
        }, payment_consent_continue_verify_request);
        const typeName = paymentAcceptancePaymentConsent_1.PaymentAcceptancePaymentConsent.discriminator;
        return (0, dataParser_1.parseDataToType)(data, typeName);
    }
    async createPaymentConsent(payment_consent_create_request, options = {}) {
        const localVarPath = '/api/v1/pa/payment_consents/create';
        const { headers, timeout, responseType } = options;
        let localVarHeaderParams = Object.assign({}, headers ? headers : {});
        if (payment_consent_create_request === null || payment_consent_create_request === undefined) {
            throw new Error('Required parameter payment_consent_create_request was null or undefined when calling createPaymentConsent.');
        }
        const data = await apiClient_1.apiClient.post(localVarPath, {
            headers: localVarHeaderParams,
            timeout,
            responseType,
        }, payment_consent_create_request);
        const typeName = paymentAcceptancePaymentConsent_1.PaymentAcceptancePaymentConsent.discriminator;
        return (0, dataParser_1.parseDataToType)(data, typeName);
    }
    async disablePaymentConsent(id, payment_consent_disable_request, options = {}) {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling disablePaymentConsent.');
        }
        const localVarPath = '/api/v1/pa/payment_consents/{id}/disable'.replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        const { headers, timeout, responseType } = options;
        let localVarHeaderParams = Object.assign({}, headers ? headers : {});
        if (payment_consent_disable_request === null || payment_consent_disable_request === undefined) {
            throw new Error('Required parameter payment_consent_disable_request was null or undefined when calling disablePaymentConsent.');
        }
        const data = await apiClient_1.apiClient.post(localVarPath, {
            headers: localVarHeaderParams,
            timeout,
            responseType,
        }, payment_consent_disable_request);
        const typeName = paymentAcceptancePaymentConsent_1.PaymentAcceptancePaymentConsent.discriminator;
        return (0, dataParser_1.parseDataToType)(data, typeName);
    }
    async listPaymentConsent({ customer_id, from_created_at, merchant_trigger_reason, next_triggered_by, page_num, page_size, status, to_created_at }, options = {}) {
        const localVarPath = '/api/v1/pa/payment_consents';
        const { headers, timeout, responseType } = options;
        let localVarHeaderParams = Object.assign({}, headers ? headers : {});
        let queryParams = {};
        if (customer_id !== undefined) {
            queryParams['customer_id'] = customer_id;
        }
        if (from_created_at !== undefined) {
            queryParams['from_created_at'] = from_created_at;
        }
        if (merchant_trigger_reason !== undefined) {
            queryParams['merchant_trigger_reason'] = merchant_trigger_reason;
        }
        if (next_triggered_by !== undefined) {
            queryParams['next_triggered_by'] = next_triggered_by;
        }
        if (page_num !== undefined) {
            queryParams['page_num'] = page_num;
        }
        if (page_size !== undefined) {
            queryParams['page_size'] = page_size;
        }
        if (status !== undefined) {
            queryParams['status'] = status;
        }
        if (to_created_at !== undefined) {
            queryParams['to_created_at'] = to_created_at;
        }
        const data = await apiClient_1.apiClient.get(localVarPath, {
            headers: localVarHeaderParams,
            params: queryParams,
            timeout,
            responseType,
        });
        const typeName = paymentAcceptanceListResponseOfPaymentAcceptancePaymentConsent_1.PaymentAcceptanceListResponseOfPaymentAcceptancePaymentConsent.discriminator;
        return (0, dataParser_1.parseDataToType)(data, typeName);
    }
    async retrievePaymentConsent(id, options = {}) {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling retrievePaymentConsent.');
        }
        const localVarPath = '/api/v1/pa/payment_consents/{id}'.replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        const { headers, timeout, responseType } = options;
        let localVarHeaderParams = Object.assign({}, headers ? headers : {});
        const data = await apiClient_1.apiClient.get(localVarPath, {
            headers: localVarHeaderParams,
            timeout,
            responseType,
        });
        const typeName = paymentAcceptancePaymentConsent_1.PaymentAcceptancePaymentConsent.discriminator;
        return (0, dataParser_1.parseDataToType)(data, typeName);
    }
    async updatePaymentConsent(id, payment_consent_update_request, options = {}) {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updatePaymentConsent.');
        }
        const localVarPath = '/api/v1/pa/payment_consents/{id}/update'.replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        const { headers, timeout, responseType } = options;
        let localVarHeaderParams = Object.assign({}, headers ? headers : {});
        if (payment_consent_update_request === null || payment_consent_update_request === undefined) {
            throw new Error('Required parameter payment_consent_update_request was null or undefined when calling updatePaymentConsent.');
        }
        const data = await apiClient_1.apiClient.post(localVarPath, {
            headers: localVarHeaderParams,
            timeout,
            responseType,
        }, payment_consent_update_request);
        const typeName = paymentAcceptancePaymentConsent_1.PaymentAcceptancePaymentConsent.discriminator;
        return (0, dataParser_1.parseDataToType)(data, typeName);
    }
    async verifyPaymentConsent(id, payment_consent_verify_request, options = {}) {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling verifyPaymentConsent.');
        }
        const localVarPath = '/api/v1/pa/payment_consents/{id}/verify'.replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        const { headers, timeout, responseType } = options;
        let localVarHeaderParams = Object.assign({}, headers ? headers : {});
        if (payment_consent_verify_request === null || payment_consent_verify_request === undefined) {
            throw new Error('Required parameter payment_consent_verify_request was null or undefined when calling verifyPaymentConsent.');
        }
        const data = await apiClient_1.apiClient.post(localVarPath, {
            headers: localVarHeaderParams,
            timeout,
            responseType,
        }, payment_consent_verify_request);
        const typeName = paymentAcceptancePaymentConsent_1.PaymentAcceptancePaymentConsent.discriminator;
        return (0, dataParser_1.parseDataToType)(data, typeName);
    }
}
exports.PaymentAcceptancePaymentConsentsApi = PaymentAcceptancePaymentConsentsApi;
//# sourceMappingURL=paymentAcceptancePaymentConsentsApi.js.map