import { CustomRequestOptions } from '../../common/request';
import { PaymentAcceptanceApplePayDomainsRegisterRequestRaw } from '../../model/paymentAcceptanceApplePayDomainsRegisterRequestRaw';
import { PaymentAcceptanceApplePayDomainsUnregisterRequestRaw } from '../../model/paymentAcceptanceApplePayDomainsUnregisterRequestRaw';
import { PaymentAcceptanceApplePayRegisteredDomains } from '../../model/paymentAcceptanceApplePayRegisteredDomains';
import { PaymentAcceptanceListResponseOfPaymentAcceptanceBankConfig } from '../../model/paymentAcceptanceListResponseOfPaymentAcceptanceBankConfig';
import { PaymentAcceptanceListResponseOfPaymentAcceptancePaymentMethodTypeConfig } from '../../model/paymentAcceptanceListResponseOfPaymentAcceptancePaymentMethodTypeConfig';
import { ReservePlanDto } from '../../model/reservePlanDto';
export interface ParamsPaymentAcceptanceConfigApigetAvailableBanks {
    country_code?: string;
    page_num?: number;
    page_size?: number;
    payment_method_type: string;
}
export interface ParamsPaymentAcceptanceConfigApiqueryPaymentMethodTypes {
    active?: boolean;
    country_code?: string;
    page_num?: number;
    page_size?: number;
    transaction_currency?: string;
    transaction_mode?: string;
}
export declare class PaymentAcceptanceConfigApi {
    getAvailableBanks({ country_code, page_num, page_size, payment_method_type }: ParamsPaymentAcceptanceConfigApigetAvailableBanks, options?: CustomRequestOptions): Promise<PaymentAcceptanceListResponseOfPaymentAcceptanceBankConfig>;
    getReservePlan(options?: CustomRequestOptions): Promise<ReservePlanDto>;
    listApplePayDomains(x_on_behalf_of?: string, options?: CustomRequestOptions): Promise<PaymentAcceptanceApplePayRegisteredDomains>;
    queryPaymentMethodTypes({ active, country_code, page_num, page_size, transaction_currency, transaction_mode }: ParamsPaymentAcceptanceConfigApiqueryPaymentMethodTypes, options?: CustomRequestOptions): Promise<PaymentAcceptanceListResponseOfPaymentAcceptancePaymentMethodTypeConfig>;
    registerApplePayDomains(apple_pay_domains_register_request: PaymentAcceptanceApplePayDomainsRegisterRequestRaw, x_on_behalf_of?: string, options?: CustomRequestOptions): Promise<PaymentAcceptanceApplePayRegisteredDomains>;
    unregisterApplePayDomains(apple_pay_domains_unregister_request: PaymentAcceptanceApplePayDomainsUnregisterRequestRaw, x_on_behalf_of?: string, options?: CustomRequestOptions): Promise<PaymentAcceptanceApplePayRegisteredDomains>;
}
//# sourceMappingURL=paymentAcceptanceConfigApi.d.ts.map