import { CustomRequestOptions } from '../../common/request';
import { PaymentAcceptanceListResponseOfPaymentAcceptancePaymentConsent } from '../../model/paymentAcceptanceListResponseOfPaymentAcceptancePaymentConsent';
import { PaymentAcceptancePaymentConsent } from '../../model/paymentAcceptancePaymentConsent';
import { PaymentAcceptancePaymentConsentCreateRequestRaw } from '../../model/paymentAcceptancePaymentConsentCreateRequestRaw';
import { PaymentAcceptancePaymentConsentDisableRequestRaw } from '../../model/paymentAcceptancePaymentConsentDisableRequestRaw';
import { PaymentAcceptancePaymentConsentUpdateRequestRaw } from '../../model/paymentAcceptancePaymentConsentUpdateRequestRaw';
import { PaymentAcceptancePaymentConsentVerifyContinueRequestRaw } from '../../model/paymentAcceptancePaymentConsentVerifyContinueRequestRaw';
import { PaymentAcceptancePaymentConsentVerifyRequestRaw } from '../../model/paymentAcceptancePaymentConsentVerifyRequestRaw';
export interface ParamsPaymentAcceptancePaymentConsentsApilistPaymentConsent {
    customer_id?: string;
    from_created_at?: string;
    merchant_trigger_reason?: string;
    next_triggered_by?: string;
    page_num?: number;
    page_size?: number;
    status?: string;
    to_created_at?: string;
}
export declare class PaymentAcceptancePaymentConsentsApi {
    continueVerifyPaymentConsent(id: string, payment_consent_continue_verify_request: PaymentAcceptancePaymentConsentVerifyContinueRequestRaw, options?: CustomRequestOptions): Promise<PaymentAcceptancePaymentConsent>;
    createPaymentConsent(payment_consent_create_request: PaymentAcceptancePaymentConsentCreateRequestRaw, options?: CustomRequestOptions): Promise<PaymentAcceptancePaymentConsent>;
    disablePaymentConsent(id: string, payment_consent_disable_request: PaymentAcceptancePaymentConsentDisableRequestRaw, options?: CustomRequestOptions): Promise<PaymentAcceptancePaymentConsent>;
    listPaymentConsent({ customer_id, from_created_at, merchant_trigger_reason, next_triggered_by, page_num, page_size, status, to_created_at }: ParamsPaymentAcceptancePaymentConsentsApilistPaymentConsent, options?: CustomRequestOptions): Promise<PaymentAcceptanceListResponseOfPaymentAcceptancePaymentConsent>;
    retrievePaymentConsent(id: string, options?: CustomRequestOptions): Promise<PaymentAcceptancePaymentConsent>;
    updatePaymentConsent(id: string, payment_consent_update_request: PaymentAcceptancePaymentConsentUpdateRequestRaw, options?: CustomRequestOptions): Promise<PaymentAcceptancePaymentConsent>;
    verifyPaymentConsent(id: string, payment_consent_verify_request: PaymentAcceptancePaymentConsentVerifyRequestRaw, options?: CustomRequestOptions): Promise<PaymentAcceptancePaymentConsent>;
}
//# sourceMappingURL=paymentAcceptancePaymentConsentsApi.d.ts.map