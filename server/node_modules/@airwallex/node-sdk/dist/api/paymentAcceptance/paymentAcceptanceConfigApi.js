"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PaymentAcceptanceConfigApi = void 0;
const apiClient_1 = require("../../client/apiClient");
const dataParser_1 = require("../../utils/dataParser");
const paymentAcceptanceApplePayRegisteredDomains_1 = require("../../model/paymentAcceptanceApplePayRegisteredDomains");
const paymentAcceptanceListResponseOfPaymentAcceptanceBankConfig_1 = require("../../model/paymentAcceptanceListResponseOfPaymentAcceptanceBankConfig");
const paymentAcceptanceListResponseOfPaymentAcceptancePaymentMethodTypeConfig_1 = require("../../model/paymentAcceptanceListResponseOfPaymentAcceptancePaymentMethodTypeConfig");
const reservePlanDto_1 = require("../../model/reservePlanDto");
class PaymentAcceptanceConfigApi {
    async getAvailableBanks({ country_code, page_num, page_size, payment_method_type }, options = {}) {
        const localVarPath = '/api/v1/pa/config/banks';
        const { headers, timeout, responseType } = options;
        let localVarHeaderParams = Object.assign({}, headers ? headers : {});
        let queryParams = {};
        if (country_code !== undefined) {
            queryParams['country_code'] = country_code;
        }
        if (page_num !== undefined) {
            queryParams['page_num'] = page_num;
        }
        if (page_size !== undefined) {
            queryParams['page_size'] = page_size;
        }
        if (payment_method_type !== undefined) {
            queryParams['payment_method_type'] = payment_method_type;
        }
        const data = await apiClient_1.apiClient.get(localVarPath, {
            headers: localVarHeaderParams,
            params: queryParams,
            timeout,
            responseType,
        });
        const typeName = paymentAcceptanceListResponseOfPaymentAcceptanceBankConfig_1.PaymentAcceptanceListResponseOfPaymentAcceptanceBankConfig.discriminator;
        return (0, dataParser_1.parseDataToType)(data, typeName);
    }
    async getReservePlan(options = {}) {
        const localVarPath = '/api/v1/pa/config/reserve_plan';
        const { headers, timeout, responseType } = options;
        let localVarHeaderParams = Object.assign({}, headers ? headers : {});
        const data = await apiClient_1.apiClient.get(localVarPath, {
            headers: localVarHeaderParams,
            timeout,
            responseType,
        });
        const typeName = reservePlanDto_1.ReservePlanDto.discriminator;
        return (0, dataParser_1.parseDataToType)(data, typeName);
    }
    async listApplePayDomains(x_on_behalf_of, options = {}) {
        const localVarPath = '/api/v1/pa/config/applepay/registered_domains';
        const { headers, timeout, responseType } = options;
        let localVarHeaderParams = Object.assign({}, headers ? headers : {});
        localVarHeaderParams['x-on-behalf-of'] = x_on_behalf_of;
        const data = await apiClient_1.apiClient.get(localVarPath, {
            headers: localVarHeaderParams,
            timeout,
            responseType,
        });
        const typeName = paymentAcceptanceApplePayRegisteredDomains_1.PaymentAcceptanceApplePayRegisteredDomains.discriminator;
        return (0, dataParser_1.parseDataToType)(data, typeName);
    }
    async queryPaymentMethodTypes({ active, country_code, page_num, page_size, transaction_currency, transaction_mode }, options = {}) {
        const localVarPath = '/api/v1/pa/config/payment_method_types';
        const { headers, timeout, responseType } = options;
        let localVarHeaderParams = Object.assign({}, headers ? headers : {});
        let queryParams = {};
        if (active !== undefined) {
            queryParams['active'] = active;
        }
        if (country_code !== undefined) {
            queryParams['country_code'] = country_code;
        }
        if (page_num !== undefined) {
            queryParams['page_num'] = page_num;
        }
        if (page_size !== undefined) {
            queryParams['page_size'] = page_size;
        }
        if (transaction_currency !== undefined) {
            queryParams['transaction_currency'] = transaction_currency;
        }
        if (transaction_mode !== undefined) {
            queryParams['transaction_mode'] = transaction_mode;
        }
        const data = await apiClient_1.apiClient.get(localVarPath, {
            headers: localVarHeaderParams,
            params: queryParams,
            timeout,
            responseType,
        });
        const typeName = paymentAcceptanceListResponseOfPaymentAcceptancePaymentMethodTypeConfig_1.PaymentAcceptanceListResponseOfPaymentAcceptancePaymentMethodTypeConfig.discriminator;
        return (0, dataParser_1.parseDataToType)(data, typeName);
    }
    async registerApplePayDomains(apple_pay_domains_register_request, x_on_behalf_of, options = {}) {
        const localVarPath = '/api/v1/pa/config/applepay/registered_domains/add_items';
        const { headers, timeout, responseType } = options;
        let localVarHeaderParams = Object.assign({}, headers ? headers : {});
        if (apple_pay_domains_register_request === null || apple_pay_domains_register_request === undefined) {
            throw new Error('Required parameter apple_pay_domains_register_request was null or undefined when calling registerApplePayDomains.');
        }
        localVarHeaderParams['x-on-behalf-of'] = x_on_behalf_of;
        const data = await apiClient_1.apiClient.post(localVarPath, {
            headers: localVarHeaderParams,
            timeout,
            responseType,
        }, apple_pay_domains_register_request);
        const typeName = paymentAcceptanceApplePayRegisteredDomains_1.PaymentAcceptanceApplePayRegisteredDomains.discriminator;
        return (0, dataParser_1.parseDataToType)(data, typeName);
    }
    async unregisterApplePayDomains(apple_pay_domains_unregister_request, x_on_behalf_of, options = {}) {
        const localVarPath = '/api/v1/pa/config/applepay/registered_domains/remove_items';
        const { headers, timeout, responseType } = options;
        let localVarHeaderParams = Object.assign({}, headers ? headers : {});
        if (apple_pay_domains_unregister_request === null || apple_pay_domains_unregister_request === undefined) {
            throw new Error('Required parameter apple_pay_domains_unregister_request was null or undefined when calling unregisterApplePayDomains.');
        }
        localVarHeaderParams['x-on-behalf-of'] = x_on_behalf_of;
        const data = await apiClient_1.apiClient.post(localVarPath, {
            headers: localVarHeaderParams,
            timeout,
            responseType,
        }, apple_pay_domains_unregister_request);
        const typeName = paymentAcceptanceApplePayRegisteredDomains_1.PaymentAcceptanceApplePayRegisteredDomains.discriminator;
        return (0, dataParser_1.parseDataToType)(data, typeName);
    }
}
exports.PaymentAcceptanceConfigApi = PaymentAcceptanceConfigApi;
//# sourceMappingURL=paymentAcceptanceConfigApi.js.map