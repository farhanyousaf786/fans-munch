"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PaymentAcceptanceCustomersApi = void 0;
const apiClient_1 = require("../../client/apiClient");
const dataParser_1 = require("../../utils/dataParser");
const paymentAcceptanceCustomer_1 = require("../../model/paymentAcceptanceCustomer");
const paymentAcceptanceCustomerClientSecret_1 = require("../../model/paymentAcceptanceCustomerClientSecret");
const paymentAcceptanceListResponseOfPaymentAcceptanceCustomer_1 = require("../../model/paymentAcceptanceListResponseOfPaymentAcceptanceCustomer");
class PaymentAcceptanceCustomersApi {
    async createCustomer(customer_create_request, options = {}) {
        const localVarPath = '/api/v1/pa/customers/create';
        const { headers, timeout, responseType } = options;
        let localVarHeaderParams = Object.assign({}, headers ? headers : {});
        if (customer_create_request === null || customer_create_request === undefined) {
            throw new Error('Required parameter customer_create_request was null or undefined when calling createCustomer.');
        }
        const data = await apiClient_1.apiClient.post(localVarPath, {
            headers: localVarHeaderParams,
            timeout,
            responseType,
        }, customer_create_request);
        const typeName = paymentAcceptanceCustomer_1.PaymentAcceptanceCustomer.discriminator;
        return (0, dataParser_1.parseDataToType)(data, typeName);
    }
    async generateCustomerClientSecret(id, options = {}) {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling generateCustomerClientSecret.');
        }
        const localVarPath = '/api/v1/pa/customers/{id}/generate_client_secret'.replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        const { headers, timeout, responseType } = options;
        let localVarHeaderParams = Object.assign({}, headers ? headers : {});
        const data = await apiClient_1.apiClient.get(localVarPath, {
            headers: localVarHeaderParams,
            timeout,
            responseType,
        });
        const typeName = paymentAcceptanceCustomerClientSecret_1.PaymentAcceptanceCustomerClientSecret.discriminator;
        return (0, dataParser_1.parseDataToType)(data, typeName);
    }
    async listCustomers({ from_created_at, merchant_customer_id, page_num, page_size, to_created_at }, options = {}) {
        const localVarPath = '/api/v1/pa/customers';
        const { headers, timeout, responseType } = options;
        let localVarHeaderParams = Object.assign({}, headers ? headers : {});
        let queryParams = {};
        if (from_created_at !== undefined) {
            queryParams['from_created_at'] = from_created_at;
        }
        if (merchant_customer_id !== undefined) {
            queryParams['merchant_customer_id'] = merchant_customer_id;
        }
        if (page_num !== undefined) {
            queryParams['page_num'] = page_num;
        }
        if (page_size !== undefined) {
            queryParams['page_size'] = page_size;
        }
        if (to_created_at !== undefined) {
            queryParams['to_created_at'] = to_created_at;
        }
        const data = await apiClient_1.apiClient.get(localVarPath, {
            headers: localVarHeaderParams,
            params: queryParams,
            timeout,
            responseType,
        });
        const typeName = paymentAcceptanceListResponseOfPaymentAcceptanceCustomer_1.PaymentAcceptanceListResponseOfPaymentAcceptanceCustomer.discriminator;
        return (0, dataParser_1.parseDataToType)(data, typeName);
    }
    async retrieveCustomer(id, options = {}) {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling retrieveCustomer.');
        }
        const localVarPath = '/api/v1/pa/customers/{id}'.replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        const { headers, timeout, responseType } = options;
        let localVarHeaderParams = Object.assign({}, headers ? headers : {});
        const data = await apiClient_1.apiClient.get(localVarPath, {
            headers: localVarHeaderParams,
            timeout,
            responseType,
        });
        const typeName = paymentAcceptanceCustomer_1.PaymentAcceptanceCustomer.discriminator;
        return (0, dataParser_1.parseDataToType)(data, typeName);
    }
    async updateCustomer(id, customer_update_request, options = {}) {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updateCustomer.');
        }
        const localVarPath = '/api/v1/pa/customers/{id}/update'.replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        const { headers, timeout, responseType } = options;
        let localVarHeaderParams = Object.assign({}, headers ? headers : {});
        if (customer_update_request === null || customer_update_request === undefined) {
            throw new Error('Required parameter customer_update_request was null or undefined when calling updateCustomer.');
        }
        const data = await apiClient_1.apiClient.post(localVarPath, {
            headers: localVarHeaderParams,
            timeout,
            responseType,
        }, customer_update_request);
        const typeName = paymentAcceptanceCustomer_1.PaymentAcceptanceCustomer.discriminator;
        return (0, dataParser_1.parseDataToType)(data, typeName);
    }
}
exports.PaymentAcceptanceCustomersApi = PaymentAcceptanceCustomersApi;
//# sourceMappingURL=paymentAcceptanceCustomersApi.js.map