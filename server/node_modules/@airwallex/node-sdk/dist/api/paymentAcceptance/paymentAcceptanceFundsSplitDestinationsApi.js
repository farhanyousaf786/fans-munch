"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PaymentAcceptanceFundsSplitDestinationsApi = void 0;
const apiClient_1 = require("../../client/apiClient");
const dataParser_1 = require("../../utils/dataParser");
const paymentAcceptanceFundsSplitDestination_1 = require("../../model/paymentAcceptanceFundsSplitDestination");
const paymentAcceptanceListResponseOfPaymentAcceptanceFundsSplitDestination_1 = require("../../model/paymentAcceptanceListResponseOfPaymentAcceptanceFundsSplitDestination");
class PaymentAcceptanceFundsSplitDestinationsApi {
    async create(FundsSplitDestination_create_request, options = {}) {
        const localVarPath = '/api/v1/pa/funds_split_destinations/create';
        const { headers, timeout, responseType } = options;
        let localVarHeaderParams = Object.assign({}, headers ? headers : {});
        if (FundsSplitDestination_create_request === null || FundsSplitDestination_create_request === undefined) {
            throw new Error('Required parameter FundsSplitDestination_create_request was null or undefined when calling create.');
        }
        const data = await apiClient_1.apiClient.post(localVarPath, {
            headers: localVarHeaderParams,
            timeout,
            responseType,
        }, FundsSplitDestination_create_request);
        const typeName = paymentAcceptanceFundsSplitDestination_1.PaymentAcceptanceFundsSplitDestination.discriminator;
        return (0, dataParser_1.parseDataToType)(data, typeName);
    }
    async disable(id, FundsSplitDestination_disable_request, options = {}) {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling disable.');
        }
        const localVarPath = '/api/v1/pa/funds_split_destinations/{id}/disable'.replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        const { headers, timeout, responseType } = options;
        let localVarHeaderParams = Object.assign({}, headers ? headers : {});
        if (FundsSplitDestination_disable_request === null || FundsSplitDestination_disable_request === undefined) {
            throw new Error('Required parameter FundsSplitDestination_disable_request was null or undefined when calling disable.');
        }
        const data = await apiClient_1.apiClient.post(localVarPath, {
            headers: localVarHeaderParams,
            timeout,
            responseType,
        }, FundsSplitDestination_disable_request);
        const typeName = paymentAcceptanceFundsSplitDestination_1.PaymentAcceptanceFundsSplitDestination.discriminator;
        return (0, dataParser_1.parseDataToType)(data, typeName);
    }
    async list({ page_num, page_size, status }, options = {}) {
        const localVarPath = '/api/v1/pa/funds_split_destinations';
        const { headers, timeout, responseType } = options;
        let localVarHeaderParams = Object.assign({}, headers ? headers : {});
        let queryParams = {};
        if (page_num !== undefined) {
            queryParams['page_num'] = page_num;
        }
        if (page_size !== undefined) {
            queryParams['page_size'] = page_size;
        }
        if (status !== undefined) {
            queryParams['status'] = status;
        }
        const data = await apiClient_1.apiClient.get(localVarPath, {
            headers: localVarHeaderParams,
            params: queryParams,
            timeout,
            responseType,
        });
        const typeName = paymentAcceptanceListResponseOfPaymentAcceptanceFundsSplitDestination_1.PaymentAcceptanceListResponseOfPaymentAcceptanceFundsSplitDestination.discriminator;
        return (0, dataParser_1.parseDataToType)(data, typeName);
    }
    async retrieve(id, options = {}) {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling retrieve.');
        }
        const localVarPath = '/api/v1/pa/funds_split_destinations/{id}'.replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        const { headers, timeout, responseType } = options;
        let localVarHeaderParams = Object.assign({}, headers ? headers : {});
        const data = await apiClient_1.apiClient.get(localVarPath, {
            headers: localVarHeaderParams,
            timeout,
            responseType,
        });
        const typeName = paymentAcceptanceFundsSplitDestination_1.PaymentAcceptanceFundsSplitDestination.discriminator;
        return (0, dataParser_1.parseDataToType)(data, typeName);
    }
}
exports.PaymentAcceptanceFundsSplitDestinationsApi = PaymentAcceptanceFundsSplitDestinationsApi;
//# sourceMappingURL=paymentAcceptanceFundsSplitDestinationsApi.js.map