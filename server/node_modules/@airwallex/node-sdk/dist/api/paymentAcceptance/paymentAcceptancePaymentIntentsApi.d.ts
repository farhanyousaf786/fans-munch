import { CustomRequestOptions } from '../../common/request';
import { PaymentAcceptanceListResponseOfPaymentAcceptancePaymentIntentListResponse } from '../../model/paymentAcceptanceListResponseOfPaymentAcceptancePaymentIntentListResponse';
import { PaymentAcceptancePaymentIntentCancelRequestRaw } from '../../model/paymentAcceptancePaymentIntentCancelRequestRaw';
import { PaymentAcceptancePaymentIntentCaptureRequestRaw } from '../../model/paymentAcceptancePaymentIntentCaptureRequestRaw';
import { PaymentAcceptancePaymentIntentConfirmRequestRaw } from '../../model/paymentAcceptancePaymentIntentConfirmRequestRaw';
import { PaymentAcceptancePaymentIntentContinueConfirmRequestRaw } from '../../model/paymentAcceptancePaymentIntentContinueConfirmRequestRaw';
import { PaymentAcceptancePaymentIntentCreateRequestRaw } from '../../model/paymentAcceptancePaymentIntentCreateRequestRaw';
import { PaymentAcceptancePaymentIntentSingleResponse } from '../../model/paymentAcceptancePaymentIntentSingleResponse';
import { PaymentAcceptancePaymentIntentUpdateRequestRaw } from '../../model/paymentAcceptancePaymentIntentUpdateRequestRaw';
export interface ParamsPaymentAcceptancePaymentIntentsApilistPaymentIntents {
    currency?: string;
    from_created_at?: string;
    merchant_order_id?: string;
    page_num?: number;
    page_size?: number;
    payment_consent_id?: string;
    status?: string;
    to_created_at?: string;
}
export declare class PaymentAcceptancePaymentIntentsApi {
    cancelPaymentIntent(id: string, payment_intent_cancel_request: PaymentAcceptancePaymentIntentCancelRequestRaw, options?: CustomRequestOptions): Promise<PaymentAcceptancePaymentIntentSingleResponse>;
    capturePaymentIntent(id: string, payment_intent_capture_request: PaymentAcceptancePaymentIntentCaptureRequestRaw, options?: CustomRequestOptions): Promise<PaymentAcceptancePaymentIntentSingleResponse>;
    confirmPaymentIntent(id: string, payment_intent_confirm_request: PaymentAcceptancePaymentIntentConfirmRequestRaw, options?: CustomRequestOptions): Promise<PaymentAcceptancePaymentIntentSingleResponse>;
    continueConfirmPaymentIntent(id: string, payment_intent_continue_confirm_request: PaymentAcceptancePaymentIntentContinueConfirmRequestRaw, options?: CustomRequestOptions): Promise<PaymentAcceptancePaymentIntentSingleResponse>;
    createPaymentIntent(payment_intent_create_request: PaymentAcceptancePaymentIntentCreateRequestRaw, options?: CustomRequestOptions): Promise<PaymentAcceptancePaymentIntentSingleResponse>;
    listPaymentIntents({ currency, from_created_at, merchant_order_id, page_num, page_size, payment_consent_id, status, to_created_at }: ParamsPaymentAcceptancePaymentIntentsApilistPaymentIntents, options?: CustomRequestOptions): Promise<PaymentAcceptanceListResponseOfPaymentAcceptancePaymentIntentListResponse>;
    retrievePaymentIntent(id: string, options?: CustomRequestOptions): Promise<PaymentAcceptancePaymentIntentSingleResponse>;
    updatePaymentIntent(id: string, payment_intent_update_request: PaymentAcceptancePaymentIntentUpdateRequestRaw, options?: CustomRequestOptions): Promise<PaymentAcceptancePaymentIntentSingleResponse>;
}
//# sourceMappingURL=paymentAcceptancePaymentIntentsApi.d.ts.map