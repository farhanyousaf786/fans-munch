import { CustomRequestOptions } from '../../common/request';
import { PaymentAcceptanceKeyBasedListResponseOfPaymentAcceptanceTerminal } from '../../model/paymentAcceptanceKeyBasedListResponseOfPaymentAcceptanceTerminal';
import { PaymentAcceptanceTerminal } from '../../model/paymentAcceptanceTerminal';
import { PaymentAcceptanceTerminalActivateRequestRaw } from '../../model/paymentAcceptanceTerminalActivateRequestRaw';
import { PaymentAcceptanceTerminalCreateRequestRaw } from '../../model/paymentAcceptanceTerminalCreateRequestRaw';
import { PaymentAcceptanceTerminalDeactivateRequestRaw } from '../../model/paymentAcceptanceTerminalDeactivateRequestRaw';
import { PaymentAcceptanceTerminalProcessPaymentIntentRequestRaw } from '../../model/paymentAcceptanceTerminalProcessPaymentIntentRequestRaw';
import { PaymentAcceptanceTerminalResetPasswordRequestRaw } from '../../model/paymentAcceptanceTerminalResetPasswordRequestRaw';
import { PaymentAcceptanceTerminalTerminateRequestRaw } from '../../model/paymentAcceptanceTerminalTerminateRequestRaw';
import { PaymentAcceptanceTerminalUpdateRequestRaw } from '../../model/paymentAcceptanceTerminalUpdateRequestRaw';
export interface ParamsPaymentAcceptanceTerminalsApiqueryTerminals {
    device_model?: string;
    nickname?: string;
    page?: string;
    page_size?: number;
    serial_number?: string;
    status?: string;
}
export declare class PaymentAcceptanceTerminalsApi {
    activateTerminal(id: string, terminal_activate_request: PaymentAcceptanceTerminalActivateRequestRaw, options?: CustomRequestOptions): Promise<PaymentAcceptanceTerminal>;
    createTerminal(terminal_create_request: PaymentAcceptanceTerminalCreateRequestRaw, options?: CustomRequestOptions): Promise<PaymentAcceptanceTerminal>;
    deactivateTerminal(id: string, terminal_deactivate_request: PaymentAcceptanceTerminalDeactivateRequestRaw, options?: CustomRequestOptions): Promise<PaymentAcceptanceTerminal>;
    processPaymentIntent(id: string, terminal_process_payment_intent_request: PaymentAcceptanceTerminalProcessPaymentIntentRequestRaw, options?: CustomRequestOptions): Promise<PaymentAcceptanceTerminal>;
    queryTerminals({ device_model, nickname, page, page_size, serial_number, status }: ParamsPaymentAcceptanceTerminalsApiqueryTerminals, options?: CustomRequestOptions): Promise<PaymentAcceptanceKeyBasedListResponseOfPaymentAcceptanceTerminal>;
    resetPassword(id: string, terminal_update_request: PaymentAcceptanceTerminalResetPasswordRequestRaw, options?: CustomRequestOptions): Promise<PaymentAcceptanceTerminal>;
    retrieveTerminal(id: string, options?: CustomRequestOptions): Promise<PaymentAcceptanceTerminal>;
    terminateTerminal(id: string, terminal_terminate_request: PaymentAcceptanceTerminalTerminateRequestRaw, options?: CustomRequestOptions): Promise<PaymentAcceptanceTerminal>;
    updateTerminal(id: string, terminal_update_request: PaymentAcceptanceTerminalUpdateRequestRaw, options?: CustomRequestOptions): Promise<PaymentAcceptanceTerminal>;
}
//# sourceMappingURL=paymentAcceptanceTerminalsApi.d.ts.map