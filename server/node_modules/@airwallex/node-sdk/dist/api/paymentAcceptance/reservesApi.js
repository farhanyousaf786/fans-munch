"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReservesApi = void 0;
const apiClient_1 = require("../../client/apiClient");
const dataParser_1 = require("../../utils/dataParser");
const reserveDto_1 = require("../../model/reserveDto");
const unreserveDto_1 = require("../../model/unreserveDto");
class ReservesApi {
    async reserve(reserveRequestDto, options = {}) {
        const localVarPath = '/api/v1/reserves/create';
        const { headers, timeout, responseType } = options;
        let localVarHeaderParams = Object.assign({}, headers ? headers : {});
        if (reserveRequestDto === null || reserveRequestDto === undefined) {
            throw new Error('Required parameter reserveRequestDto was null or undefined when calling reserve.');
        }
        const data = await apiClient_1.apiClient.post(localVarPath, {
            headers: localVarHeaderParams,
            timeout,
            responseType,
        }, reserveRequestDto);
        const typeName = reserveDto_1.ReserveDto.discriminator;
        return (0, dataParser_1.parseDataToType)(data, typeName);
    }
    async unreserve(unreserveRequestDto, options = {}) {
        const localVarPath = '/api/v1/reserves/unreserve';
        const { headers, timeout, responseType } = options;
        let localVarHeaderParams = Object.assign({}, headers ? headers : {});
        if (unreserveRequestDto === null || unreserveRequestDto === undefined) {
            throw new Error('Required parameter unreserveRequestDto was null or undefined when calling unreserve.');
        }
        const data = await apiClient_1.apiClient.post(localVarPath, {
            headers: localVarHeaderParams,
            timeout,
            responseType,
        }, unreserveRequestDto);
        const typeName = unreserveDto_1.UnreserveDto.discriminator;
        return (0, dataParser_1.parseDataToType)(data, typeName);
    }
}
exports.ReservesApi = ReservesApi;
//# sourceMappingURL=reservesApi.js.map