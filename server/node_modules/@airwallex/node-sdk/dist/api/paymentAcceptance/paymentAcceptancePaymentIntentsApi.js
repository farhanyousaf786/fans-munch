"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PaymentAcceptancePaymentIntentsApi = void 0;
const apiClient_1 = require("../../client/apiClient");
const dataParser_1 = require("../../utils/dataParser");
const paymentAcceptanceListResponseOfPaymentAcceptancePaymentIntentListResponse_1 = require("../../model/paymentAcceptanceListResponseOfPaymentAcceptancePaymentIntentListResponse");
const paymentAcceptancePaymentIntentSingleResponse_1 = require("../../model/paymentAcceptancePaymentIntentSingleResponse");
class PaymentAcceptancePaymentIntentsApi {
    async cancelPaymentIntent(id, payment_intent_cancel_request, options = {}) {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling cancelPaymentIntent.');
        }
        const localVarPath = '/api/v1/pa/payment_intents/{id}/cancel'.replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        const { headers, timeout, responseType } = options;
        let localVarHeaderParams = Object.assign({}, headers ? headers : {});
        if (payment_intent_cancel_request === null || payment_intent_cancel_request === undefined) {
            throw new Error('Required parameter payment_intent_cancel_request was null or undefined when calling cancelPaymentIntent.');
        }
        const data = await apiClient_1.apiClient.post(localVarPath, {
            headers: localVarHeaderParams,
            timeout,
            responseType,
        }, payment_intent_cancel_request);
        const typeName = paymentAcceptancePaymentIntentSingleResponse_1.PaymentAcceptancePaymentIntentSingleResponse.discriminator;
        return (0, dataParser_1.parseDataToType)(data, typeName);
    }
    async capturePaymentIntent(id, payment_intent_capture_request, options = {}) {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling capturePaymentIntent.');
        }
        const localVarPath = '/api/v1/pa/payment_intents/{id}/capture'.replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        const { headers, timeout, responseType } = options;
        let localVarHeaderParams = Object.assign({}, headers ? headers : {});
        if (payment_intent_capture_request === null || payment_intent_capture_request === undefined) {
            throw new Error('Required parameter payment_intent_capture_request was null or undefined when calling capturePaymentIntent.');
        }
        const data = await apiClient_1.apiClient.post(localVarPath, {
            headers: localVarHeaderParams,
            timeout,
            responseType,
        }, payment_intent_capture_request);
        const typeName = paymentAcceptancePaymentIntentSingleResponse_1.PaymentAcceptancePaymentIntentSingleResponse.discriminator;
        return (0, dataParser_1.parseDataToType)(data, typeName);
    }
    async confirmPaymentIntent(id, payment_intent_confirm_request, options = {}) {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling confirmPaymentIntent.');
        }
        const localVarPath = '/api/v1/pa/payment_intents/{id}/confirm'.replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        const { headers, timeout, responseType } = options;
        let localVarHeaderParams = Object.assign({}, headers ? headers : {});
        if (payment_intent_confirm_request === null || payment_intent_confirm_request === undefined) {
            throw new Error('Required parameter payment_intent_confirm_request was null or undefined when calling confirmPaymentIntent.');
        }
        const data = await apiClient_1.apiClient.post(localVarPath, {
            headers: localVarHeaderParams,
            timeout,
            responseType,
        }, payment_intent_confirm_request);
        const typeName = paymentAcceptancePaymentIntentSingleResponse_1.PaymentAcceptancePaymentIntentSingleResponse.discriminator;
        return (0, dataParser_1.parseDataToType)(data, typeName);
    }
    async continueConfirmPaymentIntent(id, payment_intent_continue_confirm_request, options = {}) {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling continueConfirmPaymentIntent.');
        }
        const localVarPath = '/api/v1/pa/payment_intents/{id}/confirm_continue'.replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        const { headers, timeout, responseType } = options;
        let localVarHeaderParams = Object.assign({}, headers ? headers : {});
        if (payment_intent_continue_confirm_request === null || payment_intent_continue_confirm_request === undefined) {
            throw new Error('Required parameter payment_intent_continue_confirm_request was null or undefined when calling continueConfirmPaymentIntent.');
        }
        const data = await apiClient_1.apiClient.post(localVarPath, {
            headers: localVarHeaderParams,
            timeout,
            responseType,
        }, payment_intent_continue_confirm_request);
        const typeName = paymentAcceptancePaymentIntentSingleResponse_1.PaymentAcceptancePaymentIntentSingleResponse.discriminator;
        return (0, dataParser_1.parseDataToType)(data, typeName);
    }
    async createPaymentIntent(payment_intent_create_request, options = {}) {
        const localVarPath = '/api/v1/pa/payment_intents/create';
        const { headers, timeout, responseType } = options;
        let localVarHeaderParams = Object.assign({}, headers ? headers : {});
        if (payment_intent_create_request === null || payment_intent_create_request === undefined) {
            throw new Error('Required parameter payment_intent_create_request was null or undefined when calling createPaymentIntent.');
        }
        const data = await apiClient_1.apiClient.post(localVarPath, {
            headers: localVarHeaderParams,
            timeout,
            responseType,
        }, payment_intent_create_request);
        const typeName = paymentAcceptancePaymentIntentSingleResponse_1.PaymentAcceptancePaymentIntentSingleResponse.discriminator;
        return (0, dataParser_1.parseDataToType)(data, typeName);
    }
    async listPaymentIntents({ currency, from_created_at, merchant_order_id, page_num, page_size, payment_consent_id, status, to_created_at }, options = {}) {
        const localVarPath = '/api/v1/pa/payment_intents';
        const { headers, timeout, responseType } = options;
        let localVarHeaderParams = Object.assign({}, headers ? headers : {});
        let queryParams = {};
        if (currency !== undefined) {
            queryParams['currency'] = currency;
        }
        if (from_created_at !== undefined) {
            queryParams['from_created_at'] = from_created_at;
        }
        if (merchant_order_id !== undefined) {
            queryParams['merchant_order_id'] = merchant_order_id;
        }
        if (page_num !== undefined) {
            queryParams['page_num'] = page_num;
        }
        if (page_size !== undefined) {
            queryParams['page_size'] = page_size;
        }
        if (payment_consent_id !== undefined) {
            queryParams['payment_consent_id'] = payment_consent_id;
        }
        if (status !== undefined) {
            queryParams['status'] = status;
        }
        if (to_created_at !== undefined) {
            queryParams['to_created_at'] = to_created_at;
        }
        const data = await apiClient_1.apiClient.get(localVarPath, {
            headers: localVarHeaderParams,
            params: queryParams,
            timeout,
            responseType,
        });
        const typeName = paymentAcceptanceListResponseOfPaymentAcceptancePaymentIntentListResponse_1.PaymentAcceptanceListResponseOfPaymentAcceptancePaymentIntentListResponse.discriminator;
        return (0, dataParser_1.parseDataToType)(data, typeName);
    }
    async retrievePaymentIntent(id, options = {}) {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling retrievePaymentIntent.');
        }
        const localVarPath = '/api/v1/pa/payment_intents/{id}'.replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        const { headers, timeout, responseType } = options;
        let localVarHeaderParams = Object.assign({}, headers ? headers : {});
        const data = await apiClient_1.apiClient.get(localVarPath, {
            headers: localVarHeaderParams,
            timeout,
            responseType,
        });
        const typeName = paymentAcceptancePaymentIntentSingleResponse_1.PaymentAcceptancePaymentIntentSingleResponse.discriminator;
        return (0, dataParser_1.parseDataToType)(data, typeName);
    }
    async updatePaymentIntent(id, payment_intent_update_request, options = {}) {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updatePaymentIntent.');
        }
        const localVarPath = '/api/v1/pa/payment_intents/{id}/update'.replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        const { headers, timeout, responseType } = options;
        let localVarHeaderParams = Object.assign({}, headers ? headers : {});
        if (payment_intent_update_request === null || payment_intent_update_request === undefined) {
            throw new Error('Required parameter payment_intent_update_request was null or undefined when calling updatePaymentIntent.');
        }
        const data = await apiClient_1.apiClient.post(localVarPath, {
            headers: localVarHeaderParams,
            timeout,
            responseType,
        }, payment_intent_update_request);
        const typeName = paymentAcceptancePaymentIntentSingleResponse_1.PaymentAcceptancePaymentIntentSingleResponse.discriminator;
        return (0, dataParser_1.parseDataToType)(data, typeName);
    }
}
exports.PaymentAcceptancePaymentIntentsApi = PaymentAcceptancePaymentIntentsApi;
//# sourceMappingURL=paymentAcceptancePaymentIntentsApi.js.map