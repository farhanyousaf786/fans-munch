import { CustomRequestOptions } from '../../common/request';
import { ConfirmCandidateAccountRequest } from '../../model/confirmCandidateAccountRequest';
import { LinkedAccountAuthRequestDto } from '../../model/linkedAccountAuthRequestDto';
import { LinkedAccountAuthResponseDto } from '../../model/linkedAccountAuthResponseDto';
import { LinkedAccountCompleteAuthRequestDto } from '../../model/linkedAccountCompleteAuthRequestDto';
import { LinkedAccountCreateDto } from '../../model/linkedAccountCreateDto';
import { LinkedAccountDto } from '../../model/linkedAccountDto';
import { MandateDto } from '../../model/mandateDto';
import { MandateRequestDto } from '../../model/mandateRequestDto';
import { PagedBalancesResultDto } from '../../model/pagedBalancesResultDto';
import { PagedLinkedAccountDto } from '../../model/pagedLinkedAccountDto';
import { VerifyMicroDepositsDto } from '../../model/verifyMicroDepositsDto';
export interface ParamsCoreResourcesLinkedAccountsApifindList {
    country_code?: string;
    from_created_at?: string;
    page_num?: number;
    page_size?: number;
    status?: string;
    to_created_at?: string;
}
export declare class CoreResourcesLinkedAccountsApi {
    auth(request: LinkedAccountAuthRequestDto, options?: CustomRequestOptions): Promise<LinkedAccountAuthResponseDto>;
    balances(id: string, options?: CustomRequestOptions): Promise<PagedBalancesResultDto>;
    completeAuth(id: string, request: LinkedAccountCompleteAuthRequestDto, options?: CustomRequestOptions): Promise<boolean>;
    confirmOneAccount(id: string, request: ConfirmCandidateAccountRequest, options?: CustomRequestOptions): Promise<object>;
    create(laCreateDto: LinkedAccountCreateDto, options?: CustomRequestOptions): Promise<LinkedAccountDto>;
    findById(id: string, options?: CustomRequestOptions): Promise<LinkedAccountDto>;
    findList({ country_code, from_created_at, page_num, page_size, status, to_created_at }: ParamsCoreResourcesLinkedAccountsApifindList, options?: CustomRequestOptions): Promise<PagedLinkedAccountDto>;
    getMandate(id: string, options?: CustomRequestOptions): Promise<MandateDto>;
    reAuth(id: string, request: LinkedAccountAuthRequestDto, options?: CustomRequestOptions): Promise<LinkedAccountAuthResponseDto>;
    suspend(id: string, options?: CustomRequestOptions): Promise<boolean>;
    updateMandate(id: string, mandate: MandateRequestDto, options?: CustomRequestOptions): Promise<MandateDto>;
    verifyMicroDeposits(id: string, verifyMicroDepositsDto: VerifyMicroDepositsDto, options?: CustomRequestOptions): Promise<LinkedAccountDto>;
}
//# sourceMappingURL=coreResourcesLinkedAccountsApi.d.ts.map