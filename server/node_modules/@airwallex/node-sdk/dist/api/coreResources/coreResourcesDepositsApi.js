"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CoreResourcesDepositsApi = void 0;
const apiClient_1 = require("../../client/apiClient");
const dataParser_1 = require("../../utils/dataParser");
const depositDtoV2_1 = require("../../model/depositDtoV2");
const pagedDepositDto_1 = require("../../model/pagedDepositDto");
class CoreResourcesDepositsApi {
    async create(depositCreateDto, options = {}) {
        const localVarPath = '/api/v1/deposits/create';
        const { headers, timeout, responseType } = options;
        let localVarHeaderParams = Object.assign({}, headers ? headers : {});
        if (depositCreateDto === null || depositCreateDto === undefined) {
            throw new Error('Required parameter depositCreateDto was null or undefined when calling create.');
        }
        const data = await apiClient_1.apiClient.post(localVarPath, {
            headers: localVarHeaderParams,
            timeout,
            responseType,
        }, depositCreateDto);
        const typeName = depositDtoV2_1.DepositDtoV2.discriminator;
        return (0, dataParser_1.parseDataToType)(data, typeName);
    }
    async findById(id, options = {}) {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling findById.');
        }
        const localVarPath = '/api/v1/deposits/{id}'.replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        const { headers, timeout, responseType } = options;
        let localVarHeaderParams = Object.assign({}, headers ? headers : {});
        const data = await apiClient_1.apiClient.get(localVarPath, {
            headers: localVarHeaderParams,
            timeout,
            responseType,
        });
        const typeName = depositDtoV2_1.DepositDtoV2.discriminator;
        return (0, dataParser_1.parseDataToType)(data, typeName);
    }
    async getDeposits({ from_created_at, page_num, page_size, to_created_at }, options = {}) {
        const localVarPath = '/api/v1/deposits';
        const { headers, timeout, responseType } = options;
        let localVarHeaderParams = Object.assign({}, headers ? headers : {});
        let queryParams = {};
        if (from_created_at !== undefined) {
            queryParams['from_created_at'] = from_created_at;
        }
        if (page_num !== undefined) {
            queryParams['page_num'] = page_num;
        }
        if (page_size !== undefined) {
            queryParams['page_size'] = page_size;
        }
        if (to_created_at !== undefined) {
            queryParams['to_created_at'] = to_created_at;
        }
        const data = await apiClient_1.apiClient.get(localVarPath, {
            headers: localVarHeaderParams,
            params: queryParams,
            timeout,
            responseType,
        });
        const typeName = pagedDepositDto_1.PagedDepositDto.discriminator;
        return (0, dataParser_1.parseDataToType)(data, typeName);
    }
}
exports.CoreResourcesDepositsApi = CoreResourcesDepositsApi;
//# sourceMappingURL=coreResourcesDepositsApi.js.map