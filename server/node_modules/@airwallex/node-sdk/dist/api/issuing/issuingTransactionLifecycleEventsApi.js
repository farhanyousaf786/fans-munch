"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.IssuingTransactionLifecycleEventsApi = void 0;
const apiClient_1 = require("../../client/apiClient");
const dataParser_1 = require("../../utils/dataParser");
const issuingNonPciBookmarkedResultOfIssuingNonPciLifecycleEventDto_1 = require("../../model/issuingNonPciBookmarkedResultOfIssuingNonPciLifecycleEventDto");
const issuingNonPciLifecycleEventDto_1 = require("../../model/issuingNonPciLifecycleEventDto");
class IssuingTransactionLifecycleEventsApi {
    async getLifecycleEventById(event_id, id, options = {}) {
        if (event_id === null || event_id === undefined) {
            throw new Error('Required parameter event_id was null or undefined when calling getLifecycleEventById.');
        }
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getLifecycleEventById.');
        }
        const localVarPath = '/api/v1/issuing/transaction_lifecycles/{id}/events/{event_id}'.replace('{' + 'event_id' + '}', encodeURIComponent(String(event_id))).replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        const { headers, timeout, responseType } = options;
        let localVarHeaderParams = Object.assign({}, headers ? headers : {});
        const data = await apiClient_1.apiClient.get(localVarPath, {
            headers: localVarHeaderParams,
            timeout,
            responseType,
        });
        const typeName = issuingNonPciLifecycleEventDto_1.IssuingNonPciLifecycleEventDto.discriminator;
        return (0, dataParser_1.parseDataToType)(data, typeName);
    }
    async getLifecycleEvents(id, { page, page_size }, options = {}) {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getLifecycleEvents.');
        }
        const localVarPath = '/api/v1/issuing/transaction_lifecycles/{id}/events'.replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        const { headers, timeout, responseType } = options;
        let localVarHeaderParams = Object.assign({}, headers ? headers : {});
        let queryParams = {};
        if (page !== undefined) {
            queryParams['page'] = page;
        }
        if (page_size !== undefined) {
            queryParams['page_size'] = page_size;
        }
        const data = await apiClient_1.apiClient.get(localVarPath, {
            headers: localVarHeaderParams,
            params: queryParams,
            timeout,
            responseType,
        });
        const typeName = issuingNonPciBookmarkedResultOfIssuingNonPciLifecycleEventDto_1.IssuingNonPciBookmarkedResultOfIssuingNonPciLifecycleEventDto.discriminator;
        return (0, dataParser_1.parseDataToType)(data, typeName);
    }
}
exports.IssuingTransactionLifecycleEventsApi = IssuingTransactionLifecycleEventsApi;
//# sourceMappingURL=issuingTransactionLifecycleEventsApi.js.map