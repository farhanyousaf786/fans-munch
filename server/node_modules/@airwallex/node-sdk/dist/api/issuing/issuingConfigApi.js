"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.IssuingConfigApi = void 0;
const apiClient_1 = require("../../client/apiClient");
const dataParser_1 = require("../../utils/dataParser");
const issuingNonPciIssuingSettingDto_1 = require("../../model/issuingNonPciIssuingSettingDto");
class IssuingConfigApi {
    async getIssuingSetting(options = {}) {
        const localVarPath = '/api/v1/issuing/config';
        const { headers, timeout, responseType } = options;
        let localVarHeaderParams = Object.assign({}, headers ? headers : {});
        const data = await apiClient_1.apiClient.get(localVarPath, {
            headers: localVarHeaderParams,
            timeout,
            responseType,
        });
        const typeName = issuingNonPciIssuingSettingDto_1.IssuingNonPciIssuingSettingDto.discriminator;
        return (0, dataParser_1.parseDataToType)(data, typeName);
    }
    async updateIssuingConfig(issuingConfigUpdateRequestDto, options = {}) {
        const localVarPath = '/api/v1/issuing/config/update';
        const { headers, timeout, responseType } = options;
        let localVarHeaderParams = Object.assign({}, headers ? headers : {});
        if (issuingConfigUpdateRequestDto === null || issuingConfigUpdateRequestDto === undefined) {
            throw new Error('Required parameter issuingConfigUpdateRequestDto was null or undefined when calling updateIssuingConfig.');
        }
        const data = await apiClient_1.apiClient.post(localVarPath, {
            headers: localVarHeaderParams,
            timeout,
            responseType,
        }, issuingConfigUpdateRequestDto);
        const typeName = issuingNonPciIssuingSettingDto_1.IssuingNonPciIssuingSettingDto.discriminator;
        return (0, dataParser_1.parseDataToType)(data, typeName);
    }
}
exports.IssuingConfigApi = IssuingConfigApi;
//# sourceMappingURL=issuingConfigApi.js.map