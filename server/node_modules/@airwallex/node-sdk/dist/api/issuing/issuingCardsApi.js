"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.IssuingCardsApi = void 0;
const apiClient_1 = require("../../client/apiClient");
const dataParser_1 = require("../../utils/dataParser");
const issuingNonPciCardDto_1 = require("../../model/issuingNonPciCardDto");
const issuingNonPciQueryResultOfIssuingNonPciCardSummaryDto_1 = require("../../model/issuingNonPciQueryResultOfIssuingNonPciCardSummaryDto");
const issuingNonPciRemainingLimitsDto_1 = require("../../model/issuingNonPciRemainingLimitsDto");
const issuingPciCardPciDto_1 = require("../../model/issuingPciCardPciDto");
class IssuingCardsApi {
    async activateCard(id, options = {}) {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling activateCard.');
        }
        const localVarPath = '/api/v1/issuing/cards/{id}/activate'.replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        const { headers, timeout, responseType } = options;
        let localVarHeaderParams = Object.assign({}, headers ? headers : {});
        const data = await apiClient_1.apiClient.post(localVarPath, {
            headers: localVarHeaderParams,
            timeout,
            responseType,
        });
        const typeName = 'any';
        return (0, dataParser_1.parseDataToType)(data, typeName);
    }
    async createCard(newCardRequest, options = {}) {
        const localVarPath = '/api/v1/issuing/cards/create';
        const { headers, timeout, responseType } = options;
        let localVarHeaderParams = Object.assign({}, headers ? headers : {});
        if (newCardRequest === null || newCardRequest === undefined) {
            throw new Error('Required parameter newCardRequest was null or undefined when calling createCard.');
        }
        const data = await apiClient_1.apiClient.post(localVarPath, {
            headers: localVarHeaderParams,
            timeout,
            responseType,
        }, newCardRequest);
        const typeName = issuingNonPciCardDto_1.IssuingNonPciCardDto.discriminator;
        return (0, dataParser_1.parseDataToType)(data, typeName);
    }
    async getCardById(id, options = {}) {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getCardById.');
        }
        const localVarPath = '/api/v1/issuing/cards/{id}'.replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        const { headers, timeout, responseType } = options;
        let localVarHeaderParams = Object.assign({}, headers ? headers : {});
        const data = await apiClient_1.apiClient.get(localVarPath, {
            headers: localVarHeaderParams,
            timeout,
            responseType,
        });
        const typeName = issuingNonPciCardDto_1.IssuingNonPciCardDto.discriminator;
        return (0, dataParser_1.parseDataToType)(data, typeName);
    }
    async getCardDetails(id, options = {}) {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getCardDetails.');
        }
        const localVarPath = '/api/v1/issuing/cards/{id}/details'.replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        const { headers, timeout, responseType } = options;
        let localVarHeaderParams = Object.assign({}, headers ? headers : {});
        const data = await apiClient_1.apiClient.get(localVarPath, {
            headers: localVarHeaderParams,
            timeout,
            responseType,
        });
        const typeName = issuingPciCardPciDto_1.IssuingPciCardPciDto.discriminator;
        return (0, dataParser_1.parseDataToType)(data, typeName);
    }
    async getCards({ card_status, cardholder_id, from_created_at, from_updated_at, nick_name, page_num, page_size, to_created_at, to_updated_at }, options = {}) {
        const localVarPath = '/api/v1/issuing/cards';
        const { headers, timeout, responseType } = options;
        let localVarHeaderParams = Object.assign({}, headers ? headers : {});
        let queryParams = {};
        if (card_status !== undefined) {
            queryParams['card_status'] = card_status;
        }
        if (cardholder_id !== undefined) {
            queryParams['cardholder_id'] = cardholder_id;
        }
        if (from_created_at !== undefined) {
            queryParams['from_created_at'] = from_created_at;
        }
        if (from_updated_at !== undefined) {
            queryParams['from_updated_at'] = from_updated_at;
        }
        if (nick_name !== undefined) {
            queryParams['nick_name'] = nick_name;
        }
        if (page_num !== undefined) {
            queryParams['page_num'] = page_num;
        }
        if (page_size !== undefined) {
            queryParams['page_size'] = page_size;
        }
        if (to_created_at !== undefined) {
            queryParams['to_created_at'] = to_created_at;
        }
        if (to_updated_at !== undefined) {
            queryParams['to_updated_at'] = to_updated_at;
        }
        const data = await apiClient_1.apiClient.get(localVarPath, {
            headers: localVarHeaderParams,
            params: queryParams,
            timeout,
            responseType,
        });
        const typeName = issuingNonPciQueryResultOfIssuingNonPciCardSummaryDto_1.IssuingNonPciQueryResultOfIssuingNonPciCardSummaryDto.discriminator;
        return (0, dataParser_1.parseDataToType)(data, typeName);
    }
    async getRemainingLimits(id, options = {}) {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getRemainingLimits.');
        }
        const localVarPath = '/api/v1/issuing/cards/{id}/limits'.replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        const { headers, timeout, responseType } = options;
        let localVarHeaderParams = Object.assign({}, headers ? headers : {});
        const data = await apiClient_1.apiClient.get(localVarPath, {
            headers: localVarHeaderParams,
            timeout,
            responseType,
        });
        const typeName = issuingNonPciRemainingLimitsDto_1.IssuingNonPciRemainingLimitsDto.discriminator;
        return (0, dataParser_1.parseDataToType)(data, typeName);
    }
    async updateCard(id, cardUpdateRequest, options = {}) {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updateCard.');
        }
        const localVarPath = '/api/v1/issuing/cards/{id}/update'.replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        const { headers, timeout, responseType } = options;
        let localVarHeaderParams = Object.assign({}, headers ? headers : {});
        if (cardUpdateRequest === null || cardUpdateRequest === undefined) {
            throw new Error('Required parameter cardUpdateRequest was null or undefined when calling updateCard.');
        }
        const data = await apiClient_1.apiClient.post(localVarPath, {
            headers: localVarHeaderParams,
            timeout,
            responseType,
        }, cardUpdateRequest);
        const typeName = issuingNonPciCardDto_1.IssuingNonPciCardDto.discriminator;
        return (0, dataParser_1.parseDataToType)(data, typeName);
    }
}
exports.IssuingCardsApi = IssuingCardsApi;
//# sourceMappingURL=issuingCardsApi.js.map