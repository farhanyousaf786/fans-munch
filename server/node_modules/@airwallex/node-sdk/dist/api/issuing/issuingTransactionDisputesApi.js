"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.IssuingTransactionDisputesApi = void 0;
const apiClient_1 = require("../../client/apiClient");
const dataParser_1 = require("../../utils/dataParser");
const issuingNonPciQueryDisputeResponseDto_1 = require("../../model/issuingNonPciQueryDisputeResponseDto");
const issuingNonPciTransactionDisputeDto_1 = require("../../model/issuingNonPciTransactionDisputeDto");
class IssuingTransactionDisputesApi {
    async cancelDispute(id, options = {}) {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling cancelDispute.');
        }
        const localVarPath = '/api/v1/issuing/transaction_disputes/{id}/cancel'.replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        const { headers, timeout, responseType } = options;
        let localVarHeaderParams = Object.assign({}, headers ? headers : {});
        const data = await apiClient_1.apiClient.post(localVarPath, {
            headers: localVarHeaderParams,
            timeout,
            responseType,
        });
        const typeName = issuingNonPciTransactionDisputeDto_1.IssuingNonPciTransactionDisputeDto.discriminator;
        return (0, dataParser_1.parseDataToType)(data, typeName);
    }
    async createDispute(request, options = {}) {
        const localVarPath = '/api/v1/issuing/transaction_disputes/create';
        const { headers, timeout, responseType } = options;
        let localVarHeaderParams = Object.assign({}, headers ? headers : {});
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling createDispute.');
        }
        const data = await apiClient_1.apiClient.post(localVarPath, {
            headers: localVarHeaderParams,
            timeout,
            responseType,
        }, request);
        const typeName = issuingNonPciTransactionDisputeDto_1.IssuingNonPciTransactionDisputeDto.discriminator;
        return (0, dataParser_1.parseDataToType)(data, typeName);
    }
    async getDisputeById(id, options = {}) {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getDisputeById.');
        }
        const localVarPath = '/api/v1/issuing/transaction_disputes/{id}'.replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        const { headers, timeout, responseType } = options;
        let localVarHeaderParams = Object.assign({}, headers ? headers : {});
        const data = await apiClient_1.apiClient.get(localVarPath, {
            headers: localVarHeaderParams,
            timeout,
            responseType,
        });
        const typeName = issuingNonPciTransactionDisputeDto_1.IssuingNonPciTransactionDisputeDto.discriminator;
        return (0, dataParser_1.parseDataToType)(data, typeName);
    }
    async queryDisputes({ detailed_status, from_created_at, from_updated_at, page, page_size, reason, reference, status, to_created_at, to_updated_at, transaction_id, updated_by }, options = {}) {
        const localVarPath = '/api/v1/issuing/transaction_disputes';
        const { headers, timeout, responseType } = options;
        let localVarHeaderParams = Object.assign({}, headers ? headers : {});
        let queryParams = {};
        if (detailed_status !== undefined) {
            queryParams['detailed_status'] = detailed_status;
        }
        if (from_created_at !== undefined) {
            queryParams['from_created_at'] = from_created_at;
        }
        if (from_updated_at !== undefined) {
            queryParams['from_updated_at'] = from_updated_at;
        }
        if (page !== undefined) {
            queryParams['page'] = page;
        }
        if (page_size !== undefined) {
            queryParams['page_size'] = page_size;
        }
        if (reason !== undefined) {
            queryParams['reason'] = reason;
        }
        if (reference !== undefined) {
            queryParams['reference'] = reference;
        }
        if (status !== undefined) {
            queryParams['status'] = status;
        }
        if (to_created_at !== undefined) {
            queryParams['to_created_at'] = to_created_at;
        }
        if (to_updated_at !== undefined) {
            queryParams['to_updated_at'] = to_updated_at;
        }
        if (transaction_id !== undefined) {
            queryParams['transaction_id'] = transaction_id;
        }
        if (updated_by !== undefined) {
            queryParams['updated_by'] = updated_by;
        }
        const data = await apiClient_1.apiClient.get(localVarPath, {
            headers: localVarHeaderParams,
            params: queryParams,
            timeout,
            responseType,
        });
        const typeName = issuingNonPciQueryDisputeResponseDto_1.IssuingNonPciQueryDisputeResponseDto.discriminator;
        return (0, dataParser_1.parseDataToType)(data, typeName);
    }
    async submitDispute(id, options = {}) {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling submitDispute.');
        }
        const localVarPath = '/api/v1/issuing/transaction_disputes/{id}/submit'.replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        const { headers, timeout, responseType } = options;
        let localVarHeaderParams = Object.assign({}, headers ? headers : {});
        const data = await apiClient_1.apiClient.post(localVarPath, {
            headers: localVarHeaderParams,
            timeout,
            responseType,
        });
        const typeName = issuingNonPciTransactionDisputeDto_1.IssuingNonPciTransactionDisputeDto.discriminator;
        return (0, dataParser_1.parseDataToType)(data, typeName);
    }
    async updateDispute(id, request, options = {}) {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updateDispute.');
        }
        const localVarPath = '/api/v1/issuing/transaction_disputes/{id}/update'.replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        const { headers, timeout, responseType } = options;
        let localVarHeaderParams = Object.assign({}, headers ? headers : {});
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling updateDispute.');
        }
        const data = await apiClient_1.apiClient.post(localVarPath, {
            headers: localVarHeaderParams,
            timeout,
            responseType,
        }, request);
        const typeName = issuingNonPciTransactionDisputeDto_1.IssuingNonPciTransactionDisputeDto.discriminator;
        return (0, dataParser_1.parseDataToType)(data, typeName);
    }
}
exports.IssuingTransactionDisputesApi = IssuingTransactionDisputesApi;
//# sourceMappingURL=issuingTransactionDisputesApi.js.map