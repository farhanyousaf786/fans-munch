"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.IssuingTransactionLifecyclesApi = void 0;
const apiClient_1 = require("../../client/apiClient");
const dataParser_1 = require("../../utils/dataParser");
const issuingNonPciBookmarkedResultOfIssuingNonPciLifecycleDto_1 = require("../../model/issuingNonPciBookmarkedResultOfIssuingNonPciLifecycleDto");
const issuingNonPciLifecycleDto_1 = require("../../model/issuingNonPciLifecycleDto");
class IssuingTransactionLifecyclesApi {
    async getLifecycleById(id, options = {}) {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getLifecycleById.');
        }
        const localVarPath = '/api/v1/issuing/transaction_lifecycles/{id}'.replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        const { headers, timeout, responseType } = options;
        let localVarHeaderParams = Object.assign({}, headers ? headers : {});
        const data = await apiClient_1.apiClient.get(localVarPath, {
            headers: localVarHeaderParams,
            timeout,
            responseType,
        });
        const typeName = issuingNonPciLifecycleDto_1.IssuingNonPciLifecycleDto.discriminator;
        return (0, dataParser_1.parseDataToType)(data, typeName);
    }
    async getLifecycles({ billing_currency, card_id, from_created_at, page, page_size, to_created_at }, options = {}) {
        const localVarPath = '/api/v1/issuing/transaction_lifecycles';
        const { headers, timeout, responseType } = options;
        let localVarHeaderParams = Object.assign({}, headers ? headers : {});
        let queryParams = {};
        if (billing_currency !== undefined) {
            queryParams['billing_currency'] = billing_currency;
        }
        if (card_id !== undefined) {
            queryParams['card_id'] = card_id;
        }
        if (from_created_at !== undefined) {
            queryParams['from_created_at'] = from_created_at;
        }
        if (page !== undefined) {
            queryParams['page'] = page;
        }
        if (page_size !== undefined) {
            queryParams['page_size'] = page_size;
        }
        if (to_created_at !== undefined) {
            queryParams['to_created_at'] = to_created_at;
        }
        const data = await apiClient_1.apiClient.get(localVarPath, {
            headers: localVarHeaderParams,
            params: queryParams,
            timeout,
            responseType,
        });
        const typeName = issuingNonPciBookmarkedResultOfIssuingNonPciLifecycleDto_1.IssuingNonPciBookmarkedResultOfIssuingNonPciLifecycleDto.discriminator;
        return (0, dataParser_1.parseDataToType)(data, typeName);
    }
}
exports.IssuingTransactionLifecyclesApi = IssuingTransactionLifecyclesApi;
//# sourceMappingURL=issuingTransactionLifecyclesApi.js.map