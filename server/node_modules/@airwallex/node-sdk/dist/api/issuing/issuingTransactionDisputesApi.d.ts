import { CustomRequestOptions } from '../../common/request';
import { IssuingNonPciCreateDisputeRequestDto } from '../../model/issuingNonPciCreateDisputeRequestDto';
import { IssuingNonPciQueryDisputeResponseDto } from '../../model/issuingNonPciQueryDisputeResponseDto';
import { IssuingNonPciTransactionDisputeDto } from '../../model/issuingNonPciTransactionDisputeDto';
import { IssuingNonPciUpdateDisputeRequestDto } from '../../model/issuingNonPciUpdateDisputeRequestDto';
export interface ParamsIssuingTransactionDisputesApiqueryDisputes {
    detailed_status?: 'DISPUTE_FILED' | 'PRE_ARB_RECEIVED' | 'PRE_ARB_DECLINED_BY_ISSUER' | 'ARBITRATION_RECEIVED' | 'DISPUTE_DECLINED' | 'PRE_ARB_DELIVERED' | 'PRE_ARB_DECLINED_BY_ACQUIRER' | 'ARB_DELIVERED' | 'WON' | 'LOST';
    from_created_at?: Date;
    from_updated_at?: Date;
    page?: string;
    page_size?: number;
    reason?: 'SUSPECTED_FRAUD' | 'UNAUTHORIZED_TRANSACTION' | 'DUPLICATED_TRANSACTION' | 'PAID_BY_OTHER_MEANS' | 'GOODS_SERVICE_NOT_AS_DESCRIBED' | 'GOODS_DAMAGED' | 'GOODS_SERVICE_NOT_RECEIVED' | 'REFUND_UNPROCESSED' | 'GOODS_SERVICE_CANCELED' | 'RECURRING_CANCELED' | 'OTHER';
    reference?: string;
    status?: 'DRAFT' | 'EXPIRED' | 'SUBMITTED' | 'REJECTED' | 'CANCELED' | 'IN_PROGRESS' | 'WON' | 'LOST';
    to_created_at?: Date;
    to_updated_at?: Date;
    transaction_id?: string;
    updated_by?: 'CUSTOMER' | 'AIRWALLEX';
}
export declare class IssuingTransactionDisputesApi {
    cancelDispute(id: string, options?: CustomRequestOptions): Promise<IssuingNonPciTransactionDisputeDto>;
    createDispute(request: IssuingNonPciCreateDisputeRequestDto, options?: CustomRequestOptions): Promise<IssuingNonPciTransactionDisputeDto>;
    getDisputeById(id: string, options?: CustomRequestOptions): Promise<IssuingNonPciTransactionDisputeDto>;
    queryDisputes({ detailed_status, from_created_at, from_updated_at, page, page_size, reason, reference, status, to_created_at, to_updated_at, transaction_id, updated_by }: ParamsIssuingTransactionDisputesApiqueryDisputes, options?: CustomRequestOptions): Promise<IssuingNonPciQueryDisputeResponseDto>;
    submitDispute(id: string, options?: CustomRequestOptions): Promise<IssuingNonPciTransactionDisputeDto>;
    updateDispute(id: string, request: IssuingNonPciUpdateDisputeRequestDto, options?: CustomRequestOptions): Promise<IssuingNonPciTransactionDisputeDto>;
}
//# sourceMappingURL=issuingTransactionDisputesApi.d.ts.map