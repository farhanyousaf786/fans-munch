"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.IssuingCardholdersApi = void 0;
const apiClient_1 = require("../../client/apiClient");
const dataParser_1 = require("../../utils/dataParser");
const issuingNonPciCardholderResponseDto_1 = require("../../model/issuingNonPciCardholderResponseDto");
const issuingNonPciDeleteCardholderResponseDto_1 = require("../../model/issuingNonPciDeleteCardholderResponseDto");
const issuingNonPciQueryResultOfIssuingNonPciCardholderResponseDto_1 = require("../../model/issuingNonPciQueryResultOfIssuingNonPciCardholderResponseDto");
class IssuingCardholdersApi {
    async createCardholder(newCardholderRequest, options = {}) {
        const localVarPath = '/api/v1/issuing/cardholders/create';
        const { headers, timeout, responseType } = options;
        let localVarHeaderParams = Object.assign({}, headers ? headers : {});
        if (newCardholderRequest === null || newCardholderRequest === undefined) {
            throw new Error('Required parameter newCardholderRequest was null or undefined when calling createCardholder.');
        }
        const data = await apiClient_1.apiClient.post(localVarPath, {
            headers: localVarHeaderParams,
            timeout,
            responseType,
        }, newCardholderRequest);
        const typeName = issuingNonPciCardholderResponseDto_1.IssuingNonPciCardholderResponseDto.discriminator;
        return (0, dataParser_1.parseDataToType)(data, typeName);
    }
    async deleteCardholder(id, options = {}) {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteCardholder.');
        }
        const localVarPath = '/api/v1/issuing/cardholders/{id}/delete'.replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        const { headers, timeout, responseType } = options;
        let localVarHeaderParams = Object.assign({}, headers ? headers : {});
        const data = await apiClient_1.apiClient.post(localVarPath, {
            headers: localVarHeaderParams,
            timeout,
            responseType,
        });
        const typeName = issuingNonPciDeleteCardholderResponseDto_1.IssuingNonPciDeleteCardholderResponseDto.discriminator;
        return (0, dataParser_1.parseDataToType)(data, typeName);
    }
    async getCardholderById(id, options = {}) {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getCardholderById.');
        }
        const localVarPath = '/api/v1/issuing/cardholders/{id}'.replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        const { headers, timeout, responseType } = options;
        let localVarHeaderParams = Object.assign({}, headers ? headers : {});
        const data = await apiClient_1.apiClient.get(localVarPath, {
            headers: localVarHeaderParams,
            timeout,
            responseType,
        });
        const typeName = issuingNonPciCardholderResponseDto_1.IssuingNonPciCardholderResponseDto.discriminator;
        return (0, dataParser_1.parseDataToType)(data, typeName);
    }
    async getCardholders({ cardholder_status, email, page_num, page_size }, options = {}) {
        const localVarPath = '/api/v1/issuing/cardholders';
        const { headers, timeout, responseType } = options;
        let localVarHeaderParams = Object.assign({}, headers ? headers : {});
        let queryParams = {};
        if (cardholder_status !== undefined) {
            queryParams['cardholder_status'] = cardholder_status;
        }
        if (email !== undefined) {
            queryParams['email'] = email;
        }
        if (page_num !== undefined) {
            queryParams['page_num'] = page_num;
        }
        if (page_size !== undefined) {
            queryParams['page_size'] = page_size;
        }
        const data = await apiClient_1.apiClient.get(localVarPath, {
            headers: localVarHeaderParams,
            params: queryParams,
            timeout,
            responseType,
        });
        const typeName = issuingNonPciQueryResultOfIssuingNonPciCardholderResponseDto_1.IssuingNonPciQueryResultOfIssuingNonPciCardholderResponseDto.discriminator;
        return (0, dataParser_1.parseDataToType)(data, typeName);
    }
    async updateCardholder(id, updateCardholderRequest, options = {}) {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updateCardholder.');
        }
        const localVarPath = '/api/v1/issuing/cardholders/{id}/update'.replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        const { headers, timeout, responseType } = options;
        let localVarHeaderParams = Object.assign({}, headers ? headers : {});
        if (updateCardholderRequest === null || updateCardholderRequest === undefined) {
            throw new Error('Required parameter updateCardholderRequest was null or undefined when calling updateCardholder.');
        }
        const data = await apiClient_1.apiClient.post(localVarPath, {
            headers: localVarHeaderParams,
            timeout,
            responseType,
        }, updateCardholderRequest);
        const typeName = issuingNonPciCardholderResponseDto_1.IssuingNonPciCardholderResponseDto.discriminator;
        return (0, dataParser_1.parseDataToType)(data, typeName);
    }
}
exports.IssuingCardholdersApi = IssuingCardholdersApi;
//# sourceMappingURL=issuingCardholdersApi.js.map