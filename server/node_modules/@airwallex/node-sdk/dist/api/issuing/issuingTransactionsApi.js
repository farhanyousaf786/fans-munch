"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.IssuingTransactionsApi = void 0;
const apiClient_1 = require("../../client/apiClient");
const dataParser_1 = require("../../utils/dataParser");
const issuingNonPciQueryResultOfIssuingNonPciTransactionDTO_1 = require("../../model/issuingNonPciQueryResultOfIssuingNonPciTransactionDTO");
const issuingNonPciTransactionDTO_1 = require("../../model/issuingNonPciTransactionDTO");
class IssuingTransactionsApi {
    async getTransactionById(id, options = {}) {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getTransactionById.');
        }
        const localVarPath = '/api/v1/issuing/transactions/{id}'.replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        const { headers, timeout, responseType } = options;
        let localVarHeaderParams = Object.assign({}, headers ? headers : {});
        const data = await apiClient_1.apiClient.get(localVarPath, {
            headers: localVarHeaderParams,
            timeout,
            responseType,
        });
        const typeName = issuingNonPciTransactionDTO_1.IssuingNonPciTransactionDTO.discriminator;
        return (0, dataParser_1.parseDataToType)(data, typeName);
    }
    async getTransactions({ billing_currency, card_id, digital_wallet_token_id, from_created_at, lifecycle_id, page_num, page_size, retrieval_ref, to_created_at, transaction_type }, options = {}) {
        const localVarPath = '/api/v1/issuing/transactions';
        const { headers, timeout, responseType } = options;
        let localVarHeaderParams = Object.assign({}, headers ? headers : {});
        let queryParams = {};
        if (billing_currency !== undefined) {
            queryParams['billing_currency'] = billing_currency;
        }
        if (card_id !== undefined) {
            queryParams['card_id'] = card_id;
        }
        if (digital_wallet_token_id !== undefined) {
            queryParams['digital_wallet_token_id'] = digital_wallet_token_id;
        }
        if (from_created_at !== undefined) {
            queryParams['from_created_at'] = from_created_at;
        }
        if (lifecycle_id !== undefined) {
            queryParams['lifecycle_id'] = lifecycle_id;
        }
        if (page_num !== undefined) {
            queryParams['page_num'] = page_num;
        }
        if (page_size !== undefined) {
            queryParams['page_size'] = page_size;
        }
        if (retrieval_ref !== undefined) {
            queryParams['retrieval_ref'] = retrieval_ref;
        }
        if (to_created_at !== undefined) {
            queryParams['to_created_at'] = to_created_at;
        }
        if (transaction_type !== undefined) {
            queryParams['transaction_type'] = transaction_type;
        }
        const data = await apiClient_1.apiClient.get(localVarPath, {
            headers: localVarHeaderParams,
            params: queryParams,
            timeout,
            responseType,
        });
        const typeName = issuingNonPciQueryResultOfIssuingNonPciTransactionDTO_1.IssuingNonPciQueryResultOfIssuingNonPciTransactionDTO.discriminator;
        return (0, dataParser_1.parseDataToType)(data, typeName);
    }
}
exports.IssuingTransactionsApi = IssuingTransactionsApi;
//# sourceMappingURL=issuingTransactionsApi.js.map