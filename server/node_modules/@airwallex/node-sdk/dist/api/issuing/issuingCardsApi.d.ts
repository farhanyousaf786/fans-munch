import { CustomRequestOptions } from '../../common/request';
import { IssuingNonPciCardDto } from '../../model/issuingNonPciCardDto';
import { IssuingNonPciCardUpdateRequestDto } from '../../model/issuingNonPciCardUpdateRequestDto';
import { IssuingNonPciNewCardRequestDto } from '../../model/issuingNonPciNewCardRequestDto';
import { IssuingNonPciQueryResultOfIssuingNonPciCardSummaryDto } from '../../model/issuingNonPciQueryResultOfIssuingNonPciCardSummaryDto';
import { IssuingNonPciRemainingLimitsDto } from '../../model/issuingNonPciRemainingLimitsDto';
import { IssuingPciCardPciDto } from '../../model/issuingPciCardPciDto';
export interface ParamsIssuingCardsApigetCards {
    card_status?: 'PENDING' | 'FAILED' | 'INACTIVE' | 'ACTIVE' | 'LOST' | 'STOLEN' | 'CLOSED' | 'BLOCKED' | 'EXPIRED' | 'UNKNOWN';
    cardholder_id?: string;
    from_created_at?: string;
    from_updated_at?: string;
    nick_name?: string;
    page_num?: number;
    page_size?: number;
    to_created_at?: string;
    to_updated_at?: string;
}
export declare class IssuingCardsApi {
    activateCard(id: string, options?: CustomRequestOptions): Promise<any>;
    createCard(newCardRequest: IssuingNonPciNewCardRequestDto, options?: CustomRequestOptions): Promise<IssuingNonPciCardDto>;
    getCardById(id: string, options?: CustomRequestOptions): Promise<IssuingNonPciCardDto>;
    getCardDetails(id: string, options?: CustomRequestOptions): Promise<IssuingPciCardPciDto>;
    getCards({ card_status, cardholder_id, from_created_at, from_updated_at, nick_name, page_num, page_size, to_created_at, to_updated_at }: ParamsIssuingCardsApigetCards, options?: CustomRequestOptions): Promise<IssuingNonPciQueryResultOfIssuingNonPciCardSummaryDto>;
    getRemainingLimits(id: string, options?: CustomRequestOptions): Promise<IssuingNonPciRemainingLimitsDto>;
    updateCard(id: string, cardUpdateRequest: IssuingNonPciCardUpdateRequestDto, options?: CustomRequestOptions): Promise<IssuingNonPciCardDto>;
}
//# sourceMappingURL=issuingCardsApi.d.ts.map