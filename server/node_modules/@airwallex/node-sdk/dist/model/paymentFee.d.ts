import { Currency } from './currency';
export interface PaymentFee {
    beneficiary_type?: PaymentFee.BeneficiaryTypeEnum;
    charge_time?: PaymentFee.ChargeTimeEnum;
    country_code?: string;
    fee_function?: PaymentFee.FeeFunctionEnum;
    fees?: Array<object>;
    local_clearing_system?: string;
    payment_action?: PaymentFee.PaymentActionEnum;
    payment_ccy?: Currency;
    payment_method?: PaymentFee.PaymentMethodEnum;
    wallet_provider?: string;
}
export declare namespace PaymentFee {
    const validBeneficiaryTypeEnum: readonly ["BANK_ACCOUNT", "DIGITAL_WALLET"];
    type BeneficiaryTypeEnum = (typeof validBeneficiaryTypeEnum)[number] | 'UNKNOWN';
    const validChargeTimeEnum: readonly ["TRADING_TIME", "NON_TRADING_TIME", "ANY"];
    type ChargeTimeEnum = (typeof validChargeTimeEnum)[number] | 'UNKNOWN';
    const validFeeFunctionEnum: readonly ["PLUS", "MAX"];
    type FeeFunctionEnum = (typeof validFeeFunctionEnum)[number] | 'UNKNOWN';
    const validPaymentActionEnum: readonly ["ALLOW_PAYMENT", "DENY_PAYMENT"];
    type PaymentActionEnum = (typeof validPaymentActionEnum)[number] | 'UNKNOWN';
    const validPaymentMethodEnum: readonly ["LOCAL", "SWIFT", "ANY"];
    type PaymentMethodEnum = (typeof validPaymentMethodEnum)[number] | 'UNKNOWN';
    const discriminator: string;
    const attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
}
//# sourceMappingURL=paymentFee.d.ts.map