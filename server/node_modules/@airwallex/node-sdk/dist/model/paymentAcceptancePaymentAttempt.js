"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PaymentAcceptancePaymentAttempt = void 0;
var PaymentAcceptancePaymentAttempt;
(function (PaymentAcceptancePaymentAttempt) {
    PaymentAcceptancePaymentAttempt.discriminator = 'PaymentAcceptancePaymentAttempt';
    PaymentAcceptancePaymentAttempt.attributeTypeMap = [
        {
            name: 'acquirer_reference_number',
            baseName: 'acquirer_reference_number',
            type: 'string',
        },
        {
            name: 'amount',
            baseName: 'amount',
            type: 'number',
        },
        {
            name: 'authentication_data',
            baseName: 'authentication_data',
            type: 'PaymentAcceptanceAuthenticationData',
        },
        {
            name: 'authorization_code',
            baseName: 'authorization_code',
            type: 'string',
        },
        {
            name: 'captured_amount',
            baseName: 'captured_amount',
            type: 'number',
        },
        {
            name: 'created_at',
            baseName: 'created_at',
            type: 'Date',
        },
        {
            name: 'currency',
            baseName: 'currency',
            type: 'string',
        },
        {
            name: 'dcc_data',
            baseName: 'dcc_data',
            type: 'PaymentAcceptanceDccResponse',
        },
        {
            name: 'failure_code',
            baseName: 'failure_code',
            type: 'string',
        },
        {
            name: 'id',
            baseName: 'id',
            type: 'string',
        },
        {
            name: 'merchant_advice_code',
            baseName: 'merchant_advice_code',
            type: 'string',
        },
        {
            name: 'merchant_order_id',
            baseName: 'merchant_order_id',
            type: 'string',
        },
        {
            name: 'payment_consent_id',
            baseName: 'payment_consent_id',
            type: 'string',
        },
        {
            name: 'payment_intent_id',
            baseName: 'payment_intent_id',
            type: 'string',
        },
        {
            name: 'payment_method',
            baseName: 'payment_method',
            type: 'PaymentAcceptanceAttemptPaymentMethodDetail',
        },
        {
            name: 'payment_method_options',
            baseName: 'payment_method_options',
            type: 'PaymentAcceptancePaymentMethodOptionResponse',
        },
        {
            name: 'payment_method_transaction_id',
            baseName: 'payment_method_transaction_id',
            type: 'string',
        },
        {
            name: 'provider_original_response_code',
            baseName: 'provider_original_response_code',
            type: 'string',
        },
        {
            name: 'provider_transaction_id',
            baseName: 'provider_transaction_id',
            type: 'string',
        },
        {
            name: 'refunded_amount',
            baseName: 'refunded_amount',
            type: 'number',
        },
        {
            name: 'settle_via',
            baseName: 'settle_via',
            type: 'string',
        },
        {
            name: 'status',
            baseName: 'status',
            type: 'string',
        },
        {
            name: 'updated_at',
            baseName: 'updated_at',
            type: 'Date',
        },
    ];
})(PaymentAcceptancePaymentAttempt || (exports.PaymentAcceptancePaymentAttempt = PaymentAcceptancePaymentAttempt = {}));
//# sourceMappingURL=paymentAcceptancePaymentAttempt.js.map