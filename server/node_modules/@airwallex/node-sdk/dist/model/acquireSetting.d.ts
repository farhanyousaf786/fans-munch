import { AccountAcquireCustomizedSetting } from './accountAcquireCustomizedSetting';
import { AccountAcquireFeatureListSetting } from './accountAcquireFeatureListSetting';
import { AccountAcquirePmSetting } from './accountAcquirePmSetting';
import { AccountAcquirePmpSetting } from './accountAcquirePmpSetting';
import { AccountCurrencySetting } from './accountCurrencySetting';
import { AcquireFeeConfig } from './acquireFeeConfig';
import { EcsSetting } from './ecsSetting';
import { MerchantApiSetting } from './merchantApiSetting';
import { MerchantBpspSettings } from './merchantBpspSettings';
import { MerchantDccSetting } from './merchantDccSetting';
import { MerchantMcpSetting } from './merchantMcpSetting';
import { MerchantPaymentMethodProviderSetting } from './merchantPaymentMethodProviderSetting';
import { MerchantPaymentMethodSetting } from './merchantPaymentMethodSetting';
import { MerchantSetting } from './merchantSetting';
import { MerchantSettlementSetting } from './merchantSettlementSetting';
import { MerchantTransactionCurrencySetting } from './merchantTransactionCurrencySetting';
import { PaymentRoutingSetting } from './paymentRoutingSetting';
import { RiskControlSetting } from './riskControlSetting';
import { SettlementConfig } from './settlementConfig';
import { ThreeDsSettings } from './threeDsSettings';
import { VersionSetting } from './versionSetting';
export interface AcquireSetting {
    attempt_expire_seconds?: number;
    card_pricing_mode?: string;
    customized_setting?: AccountAcquireCustomizedSetting;
    dcc_setting?: MerchantDccSetting;
    default_mcc?: string;
    ecs_setting?: EcsSetting;
    feature_list?: AccountAcquireFeatureListSetting;
    fee_config: Array<AcquireFeeConfig>;
    fraud_checking_status: string;
    mcp_setting?: MerchantMcpSetting;
    merchant_api_setting?: MerchantApiSetting;
    merchant_bpsp_settings?: MerchantBpspSettings;
    merchant_ccy_setting?: AccountCurrencySetting;
    merchant_payment_method_provider_setting?: Array<MerchantPaymentMethodProviderSetting>;
    merchant_payment_method_setting?: Array<MerchantPaymentMethodSetting>;
    merchant_payment_routing_setting?: Array<PaymentRoutingSetting>;
    merchant_setting?: MerchantSetting;
    merchant_settlement_setting?: MerchantSettlementSetting;
    merchant_transaction_ccy_setting?: MerchantTransactionCurrencySetting;
    payment_method_setting?: {
        [key: string]: AccountAcquirePmSetting;
    };
    payment_routing_setting?: Array<PaymentRoutingSetting>;
    platform_payments_type?: string;
    pmp_setting?: AccountAcquirePmpSetting;
    risk_control_setting?: RiskControlSetting;
    settlement_config?: SettlementConfig;
    three_ds_settings: ThreeDsSettings;
    version_setting?: VersionSetting;
}
export declare namespace AcquireSetting {
    const discriminator: string;
    const attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
}
//# sourceMappingURL=acquireSetting.d.ts.map