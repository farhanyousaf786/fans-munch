import { ErrorDetail } from './errorDetail';
import { ValidationFunction } from './validationFunction';
export interface FieldValidationError {
    code?: FieldValidationError.CodeEnum;
    description?: string;
    error_details?: Array<ErrorDetail>;
    expected_type?: FieldValidationError.ExpectedTypeEnum;
    schema_depends_on?: string;
    schema_unknown_reason?: FieldValidationError.SchemaUnknownReasonEnum;
    validation_functions?: Array<ValidationFunction>;
    value?: object;
}
export declare namespace FieldValidationError {
    const validCodeEnum: readonly ["INTERNAL_ERROR", "INVALID_TYPE", "IRRELEVANT_VALUE", "MISSING_DECISION_VALUE", "MISSING_REQUIRED_VALUE", "SCHEMA_UNKNOWN", "FAILED_VALIDATION_FUNCTIONS", "ERROR_VALIDATION_FAILED", "PROVIDER_VERIFICATION_FAILED"];
    type CodeEnum = (typeof validCodeEnum)[number] | 'UNKNOWN';
    const validExpectedTypeEnum: readonly ["array", "boolean", "number", "object", "string", "date", "enum"];
    type ExpectedTypeEnum = (typeof validExpectedTypeEnum)[number] | 'UNKNOWN';
    const validSchemaUnknownReasonEnum: readonly ["DEPENDENCY_NOT_PROVIDED", "DEPENDENCY_INVALID", "INTERNAL_ERROR"];
    type SchemaUnknownReasonEnum = (typeof validSchemaUnknownReasonEnum)[number] | 'UNKNOWN';
    const discriminator: string;
    const attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
}
//# sourceMappingURL=fieldValidationError.d.ts.map