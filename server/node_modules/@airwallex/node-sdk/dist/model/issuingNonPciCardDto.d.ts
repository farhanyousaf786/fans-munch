import { IssuingNonPciAddressDto } from './issuingNonPciAddressDto';
import { IssuingNonPciAlertSettingsDto } from './issuingNonPciAlertSettingsDto';
import { IssuingNonPciAuthorizationControlsDto } from './issuingNonPciAuthorizationControlsDto';
import { IssuingNonPciCardProgramDto } from './issuingNonPciCardProgramDto';
import { IssuingNonPciCardVersionDTO } from './issuingNonPciCardVersionDTO';
import { IssuingNonPciDeliveryDetailsDto } from './issuingNonPciDeliveryDetailsDto';
import { IssuingNonPciPrimaryContactDetailDto } from './issuingNonPciPrimaryContactDetailDto';
export interface IssuingNonPciCardDto {
    activate_on_issue?: boolean;
    additional_cardholder_ids?: Array<string>;
    alert_settings?: IssuingNonPciAlertSettingsDto;
    all_card_versions?: Array<IssuingNonPciCardVersionDTO>;
    authorization_controls?: IssuingNonPciAuthorizationControlsDto;
    brand?: string;
    card_id?: string;
    card_number?: string;
    card_status?: IssuingNonPciCardDto.CardStatusEnum;
    card_version?: number;
    cardholder_id?: string;
    client_data?: string;
    created_at?: Date;
    created_by?: string;
    delivery_details?: IssuingNonPciDeliveryDetailsDto;
    form_factor?: IssuingNonPciCardDto.FormFactorEnum;
    funding_source_id?: string;
    is_personalized?: boolean;
    issue_to?: IssuingNonPciCardDto.IssueToEnum;
    metadata?: {
        [key: string]: string;
    };
    name_on_card?: string;
    nick_name?: string;
    note?: string;
    postal_address?: IssuingNonPciAddressDto;
    primary_contact_details?: IssuingNonPciPrimaryContactDetailDto;
    program?: IssuingNonPciCardProgramDto;
    purpose?: IssuingNonPciCardDto.PurposeEnum;
    request_id?: string;
    updated_at?: Date;
}
export declare namespace IssuingNonPciCardDto {
    const validCardStatusEnum: readonly ["PENDING", "FAILED", "INACTIVE", "ACTIVE", "LOST", "STOLEN", "CLOSED", "BLOCKED", "EXPIRED", "UNKNOWN"];
    type CardStatusEnum = (typeof validCardStatusEnum)[number] | 'UNKNOWN';
    const validFormFactorEnum: readonly ["PHYSICAL", "VIRTUAL"];
    type FormFactorEnum = (typeof validFormFactorEnum)[number] | 'UNKNOWN';
    const validIssueToEnum: readonly ["ORGANISATION", "INDIVIDUAL"];
    type IssueToEnum = (typeof validIssueToEnum)[number] | 'UNKNOWN';
    const validPurposeEnum: readonly ["SUBSCRIPTIONS", "OFFICE_SUPPLIES", "MARKETING_EXPENSES", "TRAVEL_EXPENSES", "CLIENT_EXPENSES", "TEAM_EXPENSES", "ONLINE_PURCHASING", "BUSINESS_EXPENSES", "OTHER"];
    type PurposeEnum = (typeof validPurposeEnum)[number] | 'UNKNOWN';
    const discriminator: string;
    const attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
}
//# sourceMappingURL=issuingNonPciCardDto.d.ts.map