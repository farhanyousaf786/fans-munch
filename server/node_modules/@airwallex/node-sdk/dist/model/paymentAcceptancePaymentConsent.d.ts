import { PaymentAcceptanceFailureReason } from './paymentAcceptanceFailureReason';
import { PaymentAcceptanceMandate } from './paymentAcceptanceMandate';
import { PaymentAcceptancePaymentConsentNextAction } from './paymentAcceptancePaymentConsentNextAction';
import { PaymentAcceptancePaymentMethodDetailsForConsent } from './paymentAcceptancePaymentMethodDetailsForConsent';
import { PaymentAcceptanceTermsOfUse } from './paymentAcceptanceTermsOfUse';
export interface PaymentAcceptancePaymentConsent {
    client_secret?: string;
    connected_account_id?: string;
    created_at: Date;
    customer_id: string;
    disable_reason?: string;
    failure_reason?: PaymentAcceptanceFailureReason;
    id: string;
    initial_payment_intent_id?: string;
    mandate?: PaymentAcceptanceMandate;
    merchant_trigger_reason?: string;
    metadata?: object;
    next_action?: PaymentAcceptancePaymentConsentNextAction;
    next_triggered_by: string;
    payment_method?: PaymentAcceptancePaymentMethodDetailsForConsent;
    request_id: string;
    status: string;
    terms_of_use?: PaymentAcceptanceTermsOfUse;
    updated_at: Date;
}
export declare namespace PaymentAcceptancePaymentConsent {
    const discriminator: string;
    const attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
}
//# sourceMappingURL=paymentAcceptancePaymentConsent.d.ts.map