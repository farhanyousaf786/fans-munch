"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ClientCPLpRoutingRule = void 0;
var ClientCPLpRoutingRule;
(function (ClientCPLpRoutingRule) {
    ClientCPLpRoutingRule.validLocalClearingSettlementSystemEnum = [
        'DEFAULT',
        'SWIFT',
        'LOCAL',
        'RTGS',
        'ACH',
        'SAME_DAY_ACH',
        'NEXT_DAY_ACH',
        'FPS',
        'BILL_PAYMENT',
        'EFT',
        'REGULAR_EFT',
        'INTERAC',
        'GIRO',
        'FEDWIRE',
        'BPAY',
        'BANK_TRANSFER',
        'OSKO',
        'NPP',
        'FAST',
        'FASTER_PAYMENTS',
        'PAPER_CHECK',
        'CHAPS',
        'RTP',
        'FEDNOW',
        'INSTANT',
        'BACS',
        'SEPA',
        'SEPA_INSTANT',
        'ZENGIN',
        'SKN',
        'BI_FAST',
        'ATM_PRIMA',
        'EXPRESS_ELIXIR',
        'ELIXIR',
        'SORBNET',
        'INTRADAGCLEARING',
        'STRAKSCLEARING',
        'KRONOS2',
        'TARGET2',
        'DUITNOW',
        'RENTAS',
        'IPI',
        'SPEI',
        'HOFINET',
        'BECS',
        'PAYTO',
        'MASAV',
        'ZAHAV',
        'NAPAS',
        'CITAD',
        'TED',
        'PIX',
        'INSTAPAY',
        'PESONET',
        'ACT',
    ];
    ClientCPLpRoutingRule.validPaymentMethodEnum = ['LOCAL', 'SWIFT', 'ANY'];
    ClientCPLpRoutingRule.validTransTypeEnum = ['P2P', 'B2P', 'P2B', 'B2B', 'ANY'];
    ClientCPLpRoutingRule.discriminator = 'ClientCPLpRoutingRule';
    ClientCPLpRoutingRule.attributeTypeMap = [
        {
            name: 'country_code',
            baseName: 'country_code',
            type: 'string',
        },
        {
            name: 'excluded_lp_ids',
            baseName: 'excluded_lp_ids',
            type: 'Array<string>',
        },
        {
            name: 'excluded_payment_mhs',
            baseName: 'excluded_payment_mhs',
            type: 'Array<string>',
        },
        {
            name: 'local_clearing_settlement_system',
            baseName: 'local_clearing_settlement_system',
            type: 'ClientCPLpRoutingRule.LocalClearingSettlementSystemEnum',
        },
        {
            name: 'lp_id',
            baseName: 'lp_id',
            type: 'string',
        },
        {
            name: 'payment_ccy',
            baseName: 'payment_ccy',
            type: 'Currency',
        },
        {
            name: 'payment_method',
            baseName: 'payment_method',
            type: 'ClientCPLpRoutingRule.PaymentMethodEnum',
        },
        {
            name: 'source_ccy',
            baseName: 'source_ccy',
            type: 'Currency',
        },
        {
            name: 'trans_type',
            baseName: 'trans_type',
            type: 'ClientCPLpRoutingRule.TransTypeEnum',
        },
        {
            name: 'valid_payment_mhs',
            baseName: 'valid_payment_mhs',
            type: 'Array<string>',
        },
    ];
})(ClientCPLpRoutingRule || (exports.ClientCPLpRoutingRule = ClientCPLpRoutingRule = {}));
//# sourceMappingURL=clientCPLpRoutingRule.js.map