import { AdditionalSwiftCharge } from './additionalSwiftCharge';
import { PaymentAutoDispatched } from './paymentAutoDispatched';
import { PaymentFee } from './paymentFee';
import { PaymentLimit } from './paymentLimit';
export interface PaymentSettings {
    additional_swift_charges?: Array<AdditionalSwiftCharge>;
    address_validation_mode?: PaymentSettings.AddressValidationModeEnum;
    bank_account_validation_levels?: {
        [key: string]: string;
    };
    channel_status_propagation_strategy?: PaymentSettings.ChannelStatusPropagationStrategyEnum;
    charge_fee_delay_settlement_days?: number;
    enable_beneficiary_fingerprint?: boolean;
    fee_schedule?: Array<PaymentFee>;
    iban_account_number_detection?: string;
    on_demand_funding?: boolean;
    payment_auto_dispatched?: PaymentAutoDispatched;
    payment_limit?: PaymentLimit;
    payment_priority?: number;
    payment_retry_fee_mode?: PaymentSettings.PaymentRetryFeeModeEnum;
    payment_return_mode?: PaymentSettings.PaymentReturnModeEnum;
    payment_return_to?: PaymentSettings.PaymentReturnToEnum;
    refund_flow?: string;
    waive_fxdelta_fee?: boolean;
}
export declare namespace PaymentSettings {
    const validAddressValidationModeEnum: readonly ["ALLOW_COMPONENTS_ONLY", "ALLOW_FULL_OR_COMPONENTS"];
    type AddressValidationModeEnum = (typeof validAddressValidationModeEnum)[number] | 'UNKNOWN';
    const validChannelStatusPropagationStrategyEnum: readonly ["DEFAULT", "IGNORE_DISPATCHED"];
    type ChannelStatusPropagationStrategyEnum = (typeof validChannelStatusPropagationStrategyEnum)[number] | 'UNKNOWN';
    const validPaymentRetryFeeModeEnum: readonly ["PRE_PAID", "POST_PAID", "IGNORE"];
    type PaymentRetryFeeModeEnum = (typeof validPaymentRetryFeeModeEnum)[number] | 'UNKNOWN';
    const validPaymentReturnModeEnum: readonly ["PASS_THROUGH", "CHARGE_FEE"];
    type PaymentReturnModeEnum = (typeof validPaymentReturnModeEnum)[number] | 'UNKNOWN';
    const validPaymentReturnToEnum: readonly ["TO_SOURCE_CURRENCY", "TO_TARGET_CURRENCY"];
    type PaymentReturnToEnum = (typeof validPaymentReturnToEnum)[number] | 'UNKNOWN';
    const discriminator: string;
    const attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
}
//# sourceMappingURL=paymentSettings.d.ts.map