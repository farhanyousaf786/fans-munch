import { AcquireSetting } from './acquireSetting';
import { ChinaInboundSettings } from './chinaInboundSettings';
import { ClientCreditSettings } from './clientCreditSettings';
import { ClientViewOptions } from './clientViewOptions';
import { ComplianceSettings } from './complianceSettings';
import { ConnectedAccountSettings } from './connectedAccountSettings';
import { ConnectedNotificationSetting } from './connectedNotificationSetting';
import { ConnectedPermissionSetting } from './connectedPermissionSetting';
import { ConnectedPermissionSettingM2P } from './connectedPermissionSettingM2P';
import { ConversionPaymentSettings } from './conversionPaymentSettings';
import { ConversionSettings } from './conversionSettings';
import { DeveloperSettings } from './developerSettings';
import { DirectDebitCreditFeeSetting } from './directDebitCreditFeeSetting';
import { FxSettings } from './fxSettings';
import { IndonesiaOutboundSetting } from './indonesiaOutboundSetting';
import { IssuingSetting } from './issuingSetting';
import { LinkedAccountSettings } from './linkedAccountSettings';
import { McpSetting } from './mcpSetting';
import { OptionalOfstring } from './optionalOfstring';
import { PaymentPreference } from './paymentPreference';
import { PaymentSettings } from './paymentSettings';
import { SettlementPaymentDateOptions } from './settlementPaymentDateOptions';
import { ValidationSettings } from './validationSettings';
import { VietnamOutboundSetting } from './vietnamOutboundSetting';
import { VirtualBankAccountSettings } from './virtualBankAccountSettings';
export interface ClientApiSettings {
    acquire_setting?: AcquireSetting;
    china_inbound_settings?: ChinaInboundSettings;
    client_credit_settings?: ClientCreditSettings;
    client_view_options?: ClientViewOptions;
    compliance_settings?: ComplianceSettings;
    connected_account_settings?: ConnectedAccountSettings;
    connected_notification_setting?: ConnectedNotificationSetting;
    connected_permission_setting?: ConnectedPermissionSetting;
    connected_permission_setting_m2_p?: ConnectedPermissionSettingM2P;
    conversion_payment_settings?: ConversionPaymentSettings;
    conversion_settings?: ConversionSettings;
    dd_dc_fee_setting?: DirectDebitCreditFeeSetting;
    deduct_full_amount_on_create?: boolean;
    deposit_verification_path?: ClientApiSettings.DepositVerificationPathEnum;
    developer_settings?: DeveloperSettings;
    fund_deduction_mode?: ClientApiSettings.FundDeductionModeEnum;
    fx_settings?: FxSettings;
    indonesia_outbound_setting?: IndonesiaOutboundSetting;
    issuing_setting?: IssuingSetting;
    linked_account_settings?: LinkedAccountSettings;
    mcp_setting?: McpSetting;
    money_house_deposit_verification_map?: {
        [key: string]: string;
    };
    notification_url?: OptionalOfstring;
    payment_preference?: PaymentPreference;
    payment_settings?: PaymentSettings;
    pobo?: boolean;
    settlement_payment_date_options?: SettlementPaymentDateOptions;
    transfer_as_platform?: boolean;
    validation_settings?: ValidationSettings;
    vietnam_outbound_setting?: VietnamOutboundSetting;
    virtual_bank_account_settings?: VirtualBankAccountSettings;
}
export declare namespace ClientApiSettings {
    const validDepositVerificationPathEnum: readonly ["PASSTHROUGH", "VIA_OPERATOR"];
    type DepositVerificationPathEnum = (typeof validDepositVerificationPathEnum)[number] | 'UNKNOWN';
    const validFundDeductionModeEnum: readonly ["PRE_TX_CREATION", "POST_TX_CREATION", "AT_SETTLEMENT_CUTOFF"];
    type FundDeductionModeEnum = (typeof validFundDeductionModeEnum)[number] | 'UNKNOWN';
    const discriminator: string;
    const attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
}
//# sourceMappingURL=clientApiSettings.d.ts.map