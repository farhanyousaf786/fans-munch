import { ValidationFunction } from './validationFunction';
export interface Schema {
    depends_on?: string;
    relevant?: boolean;
    required?: boolean;
    rules_known?: boolean;
    schema_input_only?: boolean;
    schema_unknown_reason?: Schema.SchemaUnknownReasonEnum;
    type?: Schema.TypeEnum;
    validation_functions?: Array<ValidationFunction>;
}
export declare namespace Schema {
    const validSchemaUnknownReasonEnum: readonly ["DEPENDENCY_NOT_PROVIDED", "DEPENDENCY_INVALID", "INTERNAL_ERROR"];
    type SchemaUnknownReasonEnum = (typeof validSchemaUnknownReasonEnum)[number] | 'UNKNOWN';
    const validTypeEnum: readonly ["array", "boolean", "number", "object", "string", "date", "enum"];
    type TypeEnum = (typeof validTypeEnum)[number] | 'UNKNOWN';
    const discriminator: string;
    const attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
}
//# sourceMappingURL=schema.d.ts.map