"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ValidationFunction = void 0;
var ValidationFunction;
(function (ValidationFunction) {
    ValidationFunction.validNameEnum = [
        'AccountCurrencyMatchesPaymentCurrency',
        'Alphanumeric',
        'AlphanumericIncludingPunctuation',
        'AlphanumericIncludingSpaces',
        'LengthOneOf',
        'Boolean',
        'BPayAlphanumeric',
        'ChineseCharacters',
        'ChineseCharactersIncludingPunctuation',
        'CNAccountNameMatchesFirstLastNameInChinese',
        'CNAccountNameNotFI',
        'Date',
        'DateTime',
        'DigitsOnly',
        'NotDigitsOnly',
        'Email',
        'Equal',
        'IbanCountryOneOf',
        'IbanOrAccountNumberIsMandatory',
        'Length',
        'MayNotSpecifyPayer',
        'MaxLength',
        'MinItems',
        'MinLength',
        'MinMaxLength',
        'NumberOfDecimalPlaces',
        'OneOf',
        'PaymentAmountOrSourceAmountIsSpecified',
        'PositiveNumber',
        'SwiftCodeMatchesCountry',
        'NoPOBoxAddress',
        'EmojisIsNotSupported',
        'ShouldNotTransferToSameAccountWithFXForward',
        'ShouldNotFXForwardWithInvalidReason',
        'AccountNumberIsNotVaild',
        'PEPersonalNumberIsVaild',
        'BOPersonalNumberIsVaild',
        'AlphanumericIncludingDotHyphen',
        'ValidPostCode',
        'ShouldNotContainSpace',
        'BRBranchNameIsVaildForBancodoBrasilSA',
        'BRBranchNameIsVaildForBancoSantanderBrasilSAORItauUnibancoSA',
        'BRBranchNameIsVaildForCaixaCEFORBancoBradescoSA',
        'BRBranchNameIsVaild',
        'BRCheckingsAccountNumberIsValidForCaixaCEF',
        'BRSavingsAccountNumberIdValidForCaixaCEF',
        'BRAccountNumberIsValidForBancodoBrasilSA',
        'BRAccountNumberIsValidForBancoSantanderBrasilSA',
        'BRAccountNumberIsValidForBancoBradescoSA',
        'BRAccountNumberIsValidForItauUnibancoSA',
        'BRAccountNumberIsValidForHSBCBankBrasilSA',
        'PhoneNumberFormat',
        'PhoneNumberCountryCode',
        'PhoneNumberLength',
        'BankAccountNumberIsValid',
        'AccountRoutingValue1IsReal',
        'MAMXNZAccountPrefixIsReal',
        'HKAccountPrefixIsReal',
        'BeneficiaryContactExists',
        'BeneficiaryContactIsValid',
        'BeneficiaryContactStreetAddressIsValid',
        'BeneficiaryContactSupportsPaymentMethod',
        'BillerIdIsReal',
        'CNAreaCodeIsReal',
        'CNBankCodeIsReal',
        'NepaleseBankCodeIsReal',
        'GteToday',
        'IbanIsValid',
        'IbanBankIsValid',
        'LocalClearingSystemIrrelevant',
        'MaxAmount',
        'MinAmount',
        'MinMaxAge',
        'PayerContactExists',
        'PayerContactIsValid',
        'PayerFromAccountIsValid',
        'PaymentChannelNotSupported',
        'PaymentOrderInfo_ItemTotalCorrect',
        'PaymentOrderInfo_OrdersAllSameCurrency',
        'PaymentOrderInfo_TotalEqualsPaymentAmount',
        'PaymentOrderInfo_TotalEqualsSourceAmount',
        'ScenarioIsNotSubmit',
        'SwiftCodeIsReal',
        'SwiftCodeIsSupported',
        'WhitespaceTrimmed',
        'MinCNPersonalIdAge',
        'PersonalIdAgeRange',
        'CNPersonalIdIsValid',
        'CNBankNumberIsQualify',
        'MetadataSizeIsValid',
        'PaperCheckEnabled',
        'CNBeneficiaryIsValid',
        'CNBeneficiaryCompanyIsValid',
        'JPBranchCodeIsReal',
        'RecipientIsAccountUBO',
        'MyBankDateSharingIsEnabled',
        'MyBankPaymentCollectionIsEnabled',
        'CABranchCodeIsReal',
        'SecurityQuestionAnswerRequired',
    ];
    ValidationFunction.discriminator = 'ValidationFunction';
    ValidationFunction.attributeTypeMap = [
        {
            name: 'name',
            baseName: 'name',
            type: 'ValidationFunction.NameEnum',
        },
        {
            name: 'parameters',
            baseName: 'parameters',
            type: 'object',
        },
        {
            name: 'server_side_only',
            baseName: 'server_side_only',
            type: 'boolean',
        },
    ];
})(ValidationFunction || (exports.ValidationFunction = ValidationFunction = {}));
//# sourceMappingURL=validationFunction.js.map